import { Version } from '../../WebApp/Version';
interface MethodInfo<Name extends string, Instance extends Record<string, any> = any> {
    name: Name;
    isSupported: boolean;
    thisArg: Instance;
    appVersion: string;
    availableInVersion: string;
    executeOriginalMethod: () => ReturnType<Instance[Name]>;
}
type MethodsConfig<MethodName extends string, Instance extends Record<string, any>> = {
    [key in MethodName]?: {
        availableInVersion?: string | undefined;
        decorate?: (info: MethodInfo<key, Instance>) => any;
    };
};
interface Config<MethodName extends string, Instance extends Record<string, any>> {
    availableInVersion?: string;
    methodsConfig: MethodsConfig<MethodName, Instance> | ((info: MethodInfo<MethodName, Instance>) => any);
}
export declare abstract class FeatureSupport {
    #private;
    static set version(version: Version);
    static inVersion<Kek extends Record<string, any>, Methods extends Exclude<keyof Kek, number | symbol> = Exclude<keyof Kek, number | symbol>>(versionOrConfig: string | Config<Methods, Kek>): <Class extends new (...args: any) => any>(feature: Class, context: ClassDecoratorContext<Class>) => Class;
}
export {};
