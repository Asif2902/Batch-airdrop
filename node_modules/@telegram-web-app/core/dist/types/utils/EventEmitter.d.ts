type EventHandler<T = any> = (...value: T[]) => void;
export type Disposer = () => void;
export interface EventEmitter<Events extends string> {
    emit: (event: Events, ...value: any[]) => void;
    subscribe: (event: Events, listener: EventHandler) => Disposer;
    unsubscribe: (event: Events, listener: EventHandler) => void;
    hasEvent: (event: Events) => boolean;
}
export declare class EventBus<Events extends string = string> implements EventEmitter<Events> {
    #private;
    emit(event: Events, ...value: any[]): void;
    subscribe(event: Events, listener: EventHandler): Disposer;
    unsubscribe(event: Events, listener: EventHandler): void;
    hasEvent(event: Events): boolean;
}
export {};
