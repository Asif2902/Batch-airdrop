import { NoParamsCallback, ValueOf } from "../typings/utils";
import { HexColor } from "../typings/common";
import { SetupMainButtonEventData } from "../typings/WebView";
import { MainButton, MainButtonParams } from "../typings/WebApp";
import { Disposer, EventEmitter } from "../utils";
import { Theme } from './Theme';
interface Options {
    eventEmitter: EventEmitter<ButtonEvent>;
    theme: Theme;
    isDebug?: boolean | undefined;
}
type ButtonEvents = typeof BUTTON_EVENTS;
type ButtonEvent = ValueOf<ButtonEvents>;
type DebugButtonClickListener = (isActive: boolean) => any;
type DebugButtonUpdateListener = () => any;
type UpdateListener = (params: SetupMainButtonEventData) => any;
type OnClickListener = (callback: NoParamsCallback) => any;
type OffClickListener = (callback: NoParamsCallback) => any;
declare const BUTTON_EVENTS: {
    readonly DEBUG_BUTTON_CLICKED: "debug_button_clicked";
    readonly DEBUG_BUTTON_UPDATED: "debug_button_updated";
    readonly UPDATED: "updated";
    readonly CLICKED: "clicked";
    readonly OFF_CLICKED: "off_clicked";
};
export declare const TELEGRAM_MAIN_BUTTON: {
    readonly MAX_TEXT_LENGTH: 64;
    readonly DEFAULT_COLOR: "#2481cc";
    readonly DEFAULT_TEXT_COLOR: "#ffffff";
};
export declare class WebAppMainButton implements MainButton {
    #private;
    static get EVENTS(): {
        readonly DEBUG_BUTTON_CLICKED: "debug_button_clicked";
        readonly DEBUG_BUTTON_UPDATED: "debug_button_updated";
        readonly UPDATED: "updated";
        readonly CLICKED: "clicked";
        readonly OFF_CLICKED: "off_clicked";
    };
    constructor({ eventEmitter, theme, isDebug }: Options);
    on(event: ButtonEvents['DEBUG_BUTTON_CLICKED'], listener: DebugButtonClickListener): Disposer;
    on(event: ButtonEvents['DEBUG_BUTTON_UPDATED'], listener: DebugButtonUpdateListener): Disposer;
    on(event: ButtonEvents['UPDATED'], listener: UpdateListener): Disposer;
    on(event: ButtonEvents['CLICKED'], listener: OnClickListener): Disposer;
    on(event: ButtonEvents['OFF_CLICKED'], listener: OffClickListener): Disposer;
    set text(text: string);
    get text(): string;
    set color(color: HexColor);
    get color(): HexColor;
    set textColor(value: HexColor);
    get textColor(): HexColor;
    set isVisible(visible: boolean);
    get isVisible(): boolean;
    get isProgressVisible(): boolean;
    set isActive(active: boolean);
    get isActive(): boolean;
    setParams: (params: MainButtonParams) => this | never;
    setText: (text: string) => this;
    onClick: (callback: NoParamsCallback) => this;
    offClick: (callback: NoParamsCallback) => this;
    show: () => this;
    hide: () => this;
    enable: () => this;
    disable: () => this;
    showProgress: (leaveActive: boolean) => this;
    hideProgress: () => this;
}
export {};
