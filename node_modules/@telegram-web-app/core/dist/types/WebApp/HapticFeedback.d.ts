import { ValueOf } from "../typings/utils";
import { TriggerHapticFeedbackEventData } from "../typings/WebView";
import { HapticFeedbackImpactStyle, HapticFeedbackNotification } from "../typings/common";
import { HapticFeedback } from "../typings/WebApp";
import { Disposer, EventEmitter } from "../utils";
type HapticFeedbackEvents = typeof HAPTIC_FEEDBACK_EVENTS;
type HapticFeedbackEvent = ValueOf<HapticFeedbackEvents>;
type FeedbackTriggeredListener = (feedback: TriggerHapticFeedbackEventData) => any;
export declare const TELEGRAM_HAPTIC_FEEDBACK: {
    readonly IMPACT_STYLES: {
        readonly LIGHT: "light";
        readonly MEDIUM: "medium";
        readonly HEAVY: "heavy";
        readonly RIGID: "rigid";
        readonly SOFT: "soft";
    };
    readonly FEEDBACK_TYPES: {
        readonly IMPACT: "impact";
        readonly NOTIFICATION: "notification";
        readonly SELECTION_CHANGE: "selection_change";
    };
    readonly NOTIFICATION_TYPES: {
        readonly ERROR: "error";
        readonly SUCCESS: "success";
        readonly WARNING: "warning";
    };
};
declare const HAPTIC_FEEDBACK_EVENTS: {
    readonly FEEDBACK_TRIGGERED: "feedback_triggered";
};
declare const ON_EVENT: unique symbol;
export declare class WebAppHapticFeedback implements HapticFeedback {
    #private;
    static get EVENTS(): {
        readonly FEEDBACK_TRIGGERED: "feedback_triggered";
    };
    static get PRIVATE_KEYS(): {
        readonly ON_EVENT: typeof ON_EVENT;
    };
    constructor(eventEmitter: EventEmitter<HapticFeedbackEvent>);
    [ON_EVENT](event: HapticFeedbackEvent, listener: FeedbackTriggeredListener): Disposer;
    impactOccurred(style: HapticFeedbackImpactStyle): this | never;
    notificationOccurred(type: HapticFeedbackNotification): this | never;
    selectionChanged(): this | never;
}
export {};
