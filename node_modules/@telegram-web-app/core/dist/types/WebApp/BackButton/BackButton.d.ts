import { NoParamsCallback, ValueOf } from "../../typings/utils";
import { BackButton } from "../../typings/WebApp";
import { Disposer, EventEmitter } from "../../utils";
type ButtonEvents = typeof BACK_BUTTON_EVENTS;
type ButtonEvent = ValueOf<ButtonEvents>;
type ButtonUpdateListener = (params: Required<BackButtonParams>) => any;
type onClickListener = (callback: NoParamsCallback) => any;
type offClickListener = (callback: NoParamsCallback) => any;
interface Options {
    eventEmitter: EventEmitter<ButtonEvent>;
}
interface BackButtonParams {
    is_visible?: boolean | undefined;
}
export declare const BACK_BUTTON_EVENTS: {
    readonly UPDATED: "updated";
    readonly CLICKED: "clicked";
    readonly OFF_CLICKED: "off_clicked";
};
export declare const BACK_BUTTON_ON_EVENT_KEY: unique symbol;
export declare class WebAppBackButton implements BackButton {
    #private;
    constructor({ eventEmitter }: Options);
    [BACK_BUTTON_ON_EVENT_KEY](event: ButtonEvents['UPDATED'], listener: ButtonUpdateListener): Disposer;
    [BACK_BUTTON_ON_EVENT_KEY](event: ButtonEvents['CLICKED'], listener: onClickListener): Disposer;
    [BACK_BUTTON_ON_EVENT_KEY](event: ButtonEvents['OFF_CLICKED'], listener: offClickListener): Disposer;
    onClick(callback: NoParamsCallback): this;
    offClick(callback: NoParamsCallback): this;
    show(): this;
    hide(): this;
    get isVisible(): boolean;
    set isVisible(visible: boolean | undefined);
}
export {};
