import { ValueOf } from "../typings/utils";
import { ColorScheme } from "../typings/WebApp";
import { HexColor, ThemeParams } from "../typings/common";
import { Disposer, EventEmitter } from "../utils";
type ThemeEvents = typeof THEME_EVENTS;
type ThemeEvent = ValueOf<ThemeEvents>;
type ColorSchemeChangeListener = (newColorScheme: ColorScheme) => void;
type ThemeParamSetListener = (param: keyof Required<ThemeParams>, color: HexColor) => void;
type ThemeParamsChangeListener = (params: ThemeParams) => void;
declare const THEME_EVENTS: {
    readonly COLOR_SCHEME_CHANGED: "color_scheme_changed";
    readonly THEME_PARAM_SET: "theme_param_set";
    readonly THEME_PARAMS_CHANGED: "theme_params_changed";
};
export declare const TELEGRAM_THEME: {
    readonly COLOR_SCHEMES: {
        readonly LIGHT: "light";
        readonly DARK: "dark";
    };
    readonly PARAMS: {
        readonly BG_COLOR: "bg_color";
        readonly TEXT_COLOR: "text_color";
        readonly HINT_COLOR: "hint_color";
        readonly LINK_COLOR: "link_color";
        readonly BUTTON_COLOR: "button_color";
        readonly BUTTON_TEXT_COLOR: "button_text_color";
        readonly SECONDARY_BG_COLOR: "secondary_bg_color";
    };
    readonly HEADER_COLOR: {
        readonly BG_COLOR: "bg_color";
        readonly SECONDARY_BG_COLOR: "secondary_bg_color";
    };
};
export declare class Theme {
    #private;
    static get EVENTS(): {
        readonly COLOR_SCHEME_CHANGED: "color_scheme_changed";
        readonly THEME_PARAM_SET: "theme_param_set";
        readonly THEME_PARAMS_CHANGED: "theme_params_changed";
    };
    constructor(eventEmitter: EventEmitter<ThemeEvent>);
    on(event: ThemeEvents['COLOR_SCHEME_CHANGED'], listener: ColorSchemeChangeListener): Disposer;
    on(event: ThemeEvents['THEME_PARAM_SET'], listener: ThemeParamSetListener): Disposer;
    on(event: ThemeEvents['THEME_PARAMS_CHANGED'], listener: ThemeParamsChangeListener): Disposer;
    getParam<Key extends keyof ThemeParams>(key: Key): Required<ThemeParams>[Key] | null;
    setParam<Key extends keyof ThemeParams>(key: Key, value: Required<ThemeParams>[Key]): void;
    setParams: (params: ThemeParams) => void;
    get params(): ThemeParams;
    get colorScheme(): ColorScheme;
}
export {};
