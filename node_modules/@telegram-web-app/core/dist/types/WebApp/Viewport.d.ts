import { ValueOf } from "../typings/utils";
import { Disposer, EventEmitter } from "../utils";
interface Options {
    eventEmitter: EventEmitter<ViewportEvent>;
    mainButtonHeight: number;
}
export interface ViewportData {
    is_expanded: boolean;
    height: number;
    is_state_stable: boolean;
}
type ViewportEvents = typeof Viewport.EVENTS;
type ViewportEvent = ValueOf<ViewportEvents>;
type ViewportChangeListener = (isStateStable: boolean) => any;
type HeightCalculatedListener = (params: {
    height: number;
    stableHeight: number;
}) => any;
export declare class Viewport {
    #private;
    static get EVENTS(): {
        readonly VIEWPORT_CHANGED: "viewport_changed";
        readonly HEIGHT_CALCULATED: "height_calculated";
    };
    constructor({ eventEmitter, mainButtonHeight }: Options);
    on(event: ViewportEvents['HEIGHT_CALCULATED'], listener: HeightCalculatedListener): Disposer;
    on(event: ViewportEvents['VIEWPORT_CHANGED'], listener: ViewportChangeListener): Disposer;
    setHeight: (data?: ViewportData | undefined) => void;
    get isExpanded(): boolean;
    get height(): number;
    get stableHeight(): number;
}
export {};
