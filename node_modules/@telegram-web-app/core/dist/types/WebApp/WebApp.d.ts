import { ThemeParams, HexColor, ScanQrPopupParams } from "../typings/common";
import { AnyCallback, Nullable, NoParamsCallback } from "../typings/utils";
import { WebApp, HeaderBgColor, WebAppInitData, ColorScheme, HapticFeedback, BackButton, MainButton, OpenLinkOptions, OpenInvoiceCallback, PopupParams, ShowPopupCallback, ShowConfirmCallback, ChatTypesToChoose, ShowScanQrPopupCallback } from "../typings/WebApp";
import { WebView } from "../typings/WebView";
import { WebAppBackButton } from './BackButton';
import { BackgroundColor } from './BackgroundColor';
import { WebAppHapticFeedback } from './HapticFeedback';
import { InitData } from './InitData';
import { WebAppMainButton } from './MainButton';
import { Theme } from './Theme';
import { Viewport } from './Viewport';
import { Version } from './Version';
import { Invoices } from './Invoices';
import { Popup } from './Popup';
import { ClipboardCallback, WebAppClipboard } from './Clipboard';
import { QrPopup } from './QrPopup';
interface Dependencies {
    initData: InitData;
    version: Version;
    webView: WebView;
    bgColor: BackgroundColor;
    viewport: Viewport;
    theme: Theme;
    backButton: WebAppBackButton;
    mainButton: WebAppMainButton;
    invoices: Invoices;
    popup: Popup;
    clipboard: WebAppClipboard;
    qrPopup: QrPopup;
    hapticFeedback: WebAppHapticFeedback;
}
export declare const TELEGRAM_WEB_APP: {
    readonly MAX_BYTES_TO_SEND: 4096;
    readonly MAX_INLINE_QUERY_LENGTH: 256;
    readonly CHAT_TYPES: {
        readonly USERS: "users";
        readonly BOTS: "bots";
        readonly GROUPS: "groups";
        readonly CHANNELS: "channels";
    };
    readonly EVENTS: {
        readonly THEME_CHANGED: "themeChanged";
        readonly VIEWPORT_CHANGED: "viewportChanged";
        readonly MAIN_BUTTON_CLICKED: "mainButtonClicked";
        readonly BACK_BUTTON_CLICKED: "backButtonClicked";
        readonly SETTINGS_BUTTON_CLICKED: "settingsButtonClicked";
        readonly INVOICE_CLOSED: "invoiceClosed";
        readonly POPUP_CLOSED: "popupClosed";
        readonly QR_TEXT_RECEIVED: "qrTextReceived";
        readonly CLIPBOARD_TEXT_RECEIVED: "clipboardTextReceived";
    };
};
export declare class TelegramWebApp implements WebApp {
    #private;
    constructor({ initData, version, webView, bgColor, viewport, theme, backButton, mainButton, invoices, popup, clipboard, qrPopup, hapticFeedback, }: Dependencies);
    get initData(): string;
    get initDataUnsafe(): WebAppInitData;
    get themeParams(): ThemeParams;
    get colorScheme(): ColorScheme;
    get version(): string;
    get platform(): string;
    set headerColor(value: HeaderBgColor | HexColor);
    get headerColor(): HexColor;
    set backgroundColor(color: HeaderBgColor | HexColor);
    get backgroundColor(): HexColor;
    get HapticFeedback(): HapticFeedback;
    get BackButton(): BackButton;
    get MainButton(): MainButton;
    get viewportHeight(): number;
    get viewportStableHeight(): number;
    get isExpanded(): boolean;
    set isClosingConfirmationEnabled(isEnabled: boolean);
    get isClosingConfirmationEnabled(): boolean;
    setHeaderColor(colorKeyOrColor: HeaderBgColor | HexColor): void | never;
    setBackgroundColor(color: HeaderBgColor | HexColor): void;
    sendData(data: string): void;
    isVersionAtLeast(version: string): boolean;
    openLink(url: string, options?: Nullable<OpenLinkOptions>): void | never;
    openInvoice(url: string, callback?: Nullable<OpenInvoiceCallback>): void | never;
    openTelegramLink(url: string): void;
    readTextFromClipboard(callback?: ClipboardCallback | null | undefined): void;
    enableClosingConfirmation(): void | never;
    disableClosingConfirmation(): void | never;
    showPopup(params: PopupParams, callback?: Nullable<ShowPopupCallback>): void | never;
    showAlert(message: string, callback?: Nullable<NoParamsCallback>): void;
    showConfirm(message: string, callback?: Nullable<ShowConfirmCallback>): void;
    switchInlineQuery(query: string, chatTypesToChoose?: Nullable<ChatTypesToChoose>): void | never;
    showScanQrPopup(params: ScanQrPopupParams, callback?: Nullable<ShowScanQrPopupCallback>): void | never;
    closeScanQrPopup(): void | never;
    onEvent(eventType: string, callback: AnyCallback): void;
    offEvent(eventType: string, callback: AnyCallback): void;
    ready(): void;
    expand(): void;
    close(): void;
}
export {};
