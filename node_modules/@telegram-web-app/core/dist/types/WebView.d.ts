import { CallEventCallbackHandler, InitParams, PostEventCallback, ReceivedWebViewEventToData, WebView } from "./typings/WebView";
import { AnyCallback, EventCallbackWithOptionalData, Nullable } from "./typings/utils";
export declare const TELEGRAM_WEB_VIEW: {
    readonly EVENTS: {
        readonly SEND: {
            readonly WEB_APP_READY: "web_app_ready";
            readonly WEB_APP_EXPAND: "web_app_expand";
            readonly WEB_APP_CLOSE: "web_app_close";
            readonly WEB_APP_OPEN_POPUP: "web_app_open_popup";
            readonly WEB_APP_SETUP_CLOSING_BEHAVIOR: "web_app_setup_closing_behavior";
            readonly WEB_APP_SET_BACKGROUND_COLOR: "web_app_set_background_color";
            readonly WEB_APP_SET_HEADER_COLOR: "web_app_set_header_color";
            readonly WEB_APP_DATA_SEND: "web_app_data_send";
            readonly WEB_APP_TRIGGER_HAPTIC_FEEDBACK: "web_app_trigger_haptic_feedback";
            readonly WEB_APP_OPEN_LINK: "web_app_open_link";
            readonly WEB_APP_OPEN_TG_LINK: "web_app_open_tg_link";
            readonly WEB_APP_OPEN_INVOICE: "web_app_open_invoice";
            readonly WEB_APP_REQUEST_VIEWPORT: "web_app_request_viewport";
            readonly WEB_APP_REQUEST_THEME: "web_app_request_theme";
            readonly WEB_APP_SETUP_MAIN_BUTTON: "web_app_setup_main_button";
            readonly WEB_APP_SETUP_BACK_BUTTON: "web_app_setup_back_button";
            readonly WEB_APP_OPEN_SCAN_QR_POPUP: "web_app_open_scan_qr_popup";
            readonly WEB_APP_CLOSE_SCAN_QR_POPUP: "web_app_close_scan_qr_popup";
            readonly WEB_APP_READ_TEXT_FROM_CLIPBOARD: "web_app_read_text_from_clipboard";
            readonly WEB_APP_SWITCH_INLINE_QUERY: "web_app_switch_inline_query";
            readonly PAYMENT_FORM_SUBMIT: "payment_form_submit";
            readonly SHARE_SCORE: "share_score";
            readonly SHARE_GAME: "share_game";
            readonly GAME_OVER: "game_over";
            readonly GAME_LOADED: "game_loaded";
            readonly RESIZE_FRAME: "resize_frame";
        };
        readonly RECEIVE: {
            readonly MAIN_BUTTON_PRESSED: "main_button_pressed";
            readonly SETTINGS_BUTTON_PRESSED: "settings_button_pressed";
            readonly BACK_BUTTON_PRESSED: "back_button_pressed";
            readonly INVOICE_CLOSED: "invoice_closed";
            readonly VIEWPORT_CHANGED: "viewport_changed";
            readonly THEME_CHANGED: "theme_changed";
            readonly POPUP_CLOSED: "popup_closed";
            readonly QR_TEXT_RECEIVED: "qr_text_received";
            readonly SCAN_QR_POPUP_CLOSED: "scan_qr_popup_closed";
            readonly CLIPBOARD_TEXT_RECEIVED: "clipboard_text_received";
        };
    };
};
export declare class TelegramWebView implements WebView {
    #private;
    constructor(initParams: InitParams);
    get initParams(): InitParams;
    get isIframe(): boolean;
    postEvent: (eventType: string, callback?: Nullable<PostEventCallback>, eventData?: any) => void;
    onEvent: (eventType: string, callback: AnyCallback) => void;
    offEvent: (eventType: string, callback: AnyCallback) => void;
    callEventCallbacks: <Event_1 extends keyof ReceivedWebViewEventToData = keyof ReceivedWebViewEventToData>(eventType: Event_1, func: CallEventCallbackHandler<EventCallbackWithOptionalData<Event_1, ReceivedWebViewEventToData[Event_1]>>) => void;
    receiveEvent: <Event_1 extends keyof ReceivedWebViewEventToData = keyof ReceivedWebViewEventToData>(eventType: Event_1, eventData: ReceivedWebViewEventToData[Event_1]) => void;
}
