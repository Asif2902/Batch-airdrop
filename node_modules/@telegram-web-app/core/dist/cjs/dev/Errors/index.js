var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// temp/esm/Errors/index.js
var Errors_exports = {};
__export(Errors_exports, {
  UnsupportedVersionError: () => UnsupportedVersionError,
  WebAppBackgroundColorInvalidError: () => WebAppBackgroundColorInvalidError,
  WebAppDataInvalidError: () => WebAppDataInvalidError,
  WebAppHapticFeedbackTypeInvalidError: () => WebAppHapticFeedbackTypeInvalidError,
  WebAppHapticImpactStyleInvalidError: () => WebAppHapticImpactStyleInvalidError,
  WebAppHapticNotificationTypeInvalidError: () => WebAppHapticNotificationTypeInvalidError,
  WebAppHeaderColorKeyInvalidError: () => WebAppHeaderColorKeyInvalidError,
  WebAppInlineChooseChatTypeInvalidError: () => WebAppInlineChooseChatTypeInvalidError,
  WebAppInlineModeDisabledError: () => WebAppInlineModeDisabledError,
  WebAppInlineQueryInvalidError: () => WebAppInlineQueryInvalidError,
  WebAppInvoiceOpenedError: () => WebAppInvoiceOpenedError,
  WebAppInvoiceUrlInvalidError: () => WebAppInvoiceUrlInvalidError,
  WebAppMainButtonParamInvalidError: () => WebAppMainButtonParamInvalidError,
  WebAppMethodUnsupportedError: () => WebAppMethodUnsupportedError,
  WebAppPopupOpenedError: () => WebAppPopupOpenedError,
  WebAppPopupParamInvalidError: () => WebAppPopupParamInvalidError,
  WebAppScanQrPopupOpenedError: () => WebAppScanQrPopupOpenedError,
  WebAppScanQrPopupParamInvalidError: () => WebAppScanQrPopupParamInvalidError,
  WebAppTelegramUrlInvalidError: () => WebAppTelegramUrlInvalidError
});
module.exports = __toCommonJS(Errors_exports);

// temp/esm/Errors/HapticFeedback/WebAppHapticFeedbackTypeInvalid.js
var WebAppHapticFeedbackTypeInvalidError = class extends Error {
  constructor(type) {
    super(`[Telegram.WebApp] Haptic feedback type is invalid ${type}`);
  }
};

// temp/esm/Errors/HapticFeedback/WebAppHapticImpactStyleInvalid.js
var WebAppHapticImpactStyleInvalidError = class extends Error {
  constructor(style) {
    super(`[Telegram.WebApp] Haptic impact style is invalid ${style}`);
  }
};

// temp/esm/Errors/HapticFeedback/WebAppHapticNotificationTypeInvalid.js
var WebAppHapticNotificationTypeInvalidError = class extends Error {
  constructor(notification) {
    super(`[Telegram.WebApp] Haptic notification type is invalid ${notification}`);
  }
};

// temp/esm/Errors/Invoice/WebAppInvoiceOpened.js
var WebAppInvoiceOpenedError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Invoice is already opened");
  }
};

// temp/esm/Errors/Invoice/WebAppInvoiceUrlInvalid.js
var WebAppInvoiceUrlInvalidError = class extends Error {
  constructor(url) {
    super(`[Telegram.WebApp] Invoice url is invalid ${url}`);
  }
};

// temp/esm/Errors/Popup/WebAppPopupOpened.js
var WebAppPopupOpenedError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Popup is already opened");
  }
};

// temp/esm/Errors/Popup/WebAppPopupParamInvalid.js
var WebAppPopupParamInvalidError = class extends Error {
  constructor(invalidParamMessage) {
    super(`[Telegram.WebApp] Popup ${invalidParamMessage}`);
  }
};

// temp/esm/Errors/ScanQrPopup/WebAppScanQrPopupOpened.js
var WebAppScanQrPopupOpenedError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Popup is already opened");
  }
};

// temp/esm/Errors/ScanQrPopup/WebAppScanQrPopupParamInvalid.js
var WebAppScanQrPopupParamInvalidError = class extends Error {
  constructor(invalidParamMessage) {
    super(`[Telegram.WebApp] Scan QR popup ${invalidParamMessage}`);
  }
};

// temp/esm/Errors/UnsupportedVersion.js
var UnsupportedVersionError = class extends RangeError {
  constructor(feature, method, version) {
    const message = `[Telegram.WebApp] ${method} from feature ${feature} is unavailable in version ${version}`;
    super(message);
  }
};

// temp/esm/Errors/WebAppBackgroundColorInvalid.js
var WebAppBackgroundColorInvalidError = class extends Error {
  constructor(color) {
    super(`[Telegram.WebApp] Background color format is invalid ${color}`);
  }
};

// temp/esm/Errors/WebAppDataInvalid.js
var WebAppDataInvalidError = class extends Error {
  constructor(invalidDataMessage) {
    super(`[Telegram.WebApp] Data ${invalidDataMessage}`);
  }
};

// temp/esm/Errors/WebAppHeaderColorKeyInvalid.js
var WebAppHeaderColorKeyInvalidError = class extends Error {
  constructor(colorKeyOrColor) {
    super(`[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, 'bg_color', 'secondary_bg_color' ${colorKeyOrColor}`);
  }
};

// temp/esm/Errors/WebAppInlineChooseChatTypeInvalid.js
var WebAppInlineChooseChatTypeInvalidError = class extends Error {
  constructor(invalidTypeMessage) {
    super(`[Telegram.WebApp] Choose chat ${invalidTypeMessage}`);
  }
};

// temp/esm/Errors/WebAppInlineModeDisabled.js
var WebAppInlineModeDisabledError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline");
  }
};

// temp/esm/Errors/WebAppInlineQueryInvalid.js
var WebAppInlineQueryInvalidError = class extends Error {
  constructor(invalidQueryMessage) {
    super(`[Telegram.WebApp] Inline query ${invalidQueryMessage}`);
  }
};

// temp/esm/Errors/WebAppMainButtonParamInvalid.js
var WebAppMainButtonParamInvalidError = class extends Error {
  constructor(invalidParamMessage) {
    super(`[Telegram.WebApp] Main button ${invalidParamMessage}`);
  }
};

// temp/esm/Errors/WebAppMethodUnsupported.js
var WebAppMethodUnsupportedError = class extends Error {
  constructor(method, version) {
    super(`[Telegram.WebApp] Method ${method} is not supported in version ${version}`);
  }
};

// temp/esm/Errors/WebAppTelegramUrlInvalid.js
var WebAppTelegramUrlInvalidError = class extends Error {
  constructor(invalidUrlMessage) {
    super(`[Telegram.WebApp] Url ${invalidUrlMessage}`);
  }
};
