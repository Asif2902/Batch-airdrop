import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-MQXBDTVK.js";

// ../../node_modules/.pnpm/tslib@2.5.0/node_modules/tslib/tslib.es6.js
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.push(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.push(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}

// src/utils/byteLength/byteLength.ts
var MAX_BYTE = 127;
var TWO_KB_THRESHOLD = 2047;
var MAX_UNSIGNED_16_BIT = 65535;
var MAGIC_NUMBER_1 = 56320;
var MAGIC_NUMBER_2 = 57343;
var byteLength = (data) => {
  if (window.Blob) {
    try {
      return new window.Blob([data]).size;
    } catch {
    }
  }
  let size = data.length;
  for (let i = data.length - 1; i >= 0; i--) {
    const code = data.charCodeAt(i);
    if (code > MAX_BYTE && code <= TWO_KB_THRESHOLD) {
      size++;
    } else if (code > TWO_KB_THRESHOLD && code <= MAX_UNSIGNED_16_BIT) {
      size += 2;
    }
    if (code >= MAGIC_NUMBER_1 && code <= MAGIC_NUMBER_2) {
      i--;
    }
  }
  return size;
};

// src/utils/EventEmitter.ts
var _events, _addEventListener, addEventListener_fn, _createEventListenersSet, createEventListenersSet_fn;
var EventBus = class {
  constructor() {
    __privateAdd(this, _addEventListener);
    __privateAdd(this, _createEventListenersSet);
    __privateAdd(this, _events, /* @__PURE__ */ new Map());
  }
  emit(event, ...value) {
    const listener = __privateGet(this, _events).get(event);
    if (!listener) {
      return;
    }
    const evaluateListener = (listener2) => listener2(...value);
    listener.forEach(evaluateListener);
  }
  subscribe(event, listener) {
    if (!__privateGet(this, _events).has(event)) {
      __privateMethod(this, _createEventListenersSet, createEventListenersSet_fn).call(this, event);
    }
    __privateMethod(this, _addEventListener, addEventListener_fn).call(this, event, listener);
    return () => this.unsubscribe(event, listener);
  }
  unsubscribe(event, listener) {
    if (!__privateGet(this, _events).has(event)) {
      return;
    }
    const listenersSet = __privateGet(this, _events).get(event);
    listenersSet.delete(listener);
  }
  hasEvent(event) {
    return __privateGet(this, _events).has(event);
  }
};
_events = new WeakMap();
_addEventListener = new WeakSet();
addEventListener_fn = function(event, listener) {
  const listenersSet = __privateGet(this, _events).get(event);
  listenersSet.add(listener);
};
_createEventListenersSet = new WeakSet();
createEventListenersSet_fn = function(event) {
  const listenersSet = /* @__PURE__ */ new Set();
  __privateGet(this, _events).set(event, listenersSet);
};

// src/utils/generateId/generateId.ts
var generateId = (length) => {
  const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  const charsLength = chars.length;
  let id = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charsLength);
    id += chars[randomIndex];
  }
  return id;
};

// src/utils/sessionStorage.ts
var _SessionStorage = class {
};
var SessionStorage = _SessionStorage;
SessionStorage.BASE_KEY = "__telegram__";
SessionStorage.get = (key) => {
  try {
    return JSON.parse(window.sessionStorage.getItem(_SessionStorage.BASE_KEY + key));
  } catch {
    return null;
  }
};
SessionStorage.set = (key, value) => {
  try {
    window.sessionStorage.setItem(_SessionStorage.BASE_KEY + key, JSON.stringify(value));
    return true;
  } catch {
    return false;
  }
};

// src/utils/isNullable/isNullable.ts
var isNullable = (value) => {
  return value === void 0 || value === null;
};

// src/utils/url.ts
var urlSafeDecode = (urlencoded) => {
  try {
    urlencoded = urlencoded.replace(/\+/g, "%20");
    return decodeURIComponent(urlencoded);
  } catch {
    return urlencoded;
  }
};
var urlParseHashParams = (locationHash) => {
  locationHash = locationHash.replace(/^#/, "");
  if (!locationHash.length) {
    return {};
  }
  if (!locationHash.includes("=") && !locationHash.includes("?")) {
    return { _path: urlSafeDecode(locationHash) };
  }
  const params = {};
  const queryStringIndex = locationHash.indexOf("?");
  if (queryStringIndex >= 0) {
    const pathParam = locationHash.slice(0, queryStringIndex);
    params._path = urlSafeDecode(pathParam);
    locationHash = locationHash.slice(queryStringIndex + 1);
  }
  const queryParams = urlParseQueryString(locationHash);
  for (const [key, value] of Object.entries(queryParams)) {
    params[key] = value;
  }
  return params;
};
var urlParseQueryString = (queryString) => {
  if (!queryString.length) {
    return {};
  }
  const queryStringParams = queryString.split("&");
  const params = queryStringParams.reduce((acc, param) => {
    const [name, value] = param.split("=");
    const paramName = urlSafeDecode(name);
    const paramValue = isNullable(value) ? null : urlSafeDecode(value);
    return { ...acc, [paramName]: paramValue };
  }, {});
  return params;
};
var urlAppendHashParams = (url, addHash) => {
  const hashIndex = url.indexOf("#");
  if (hashIndex < 0) {
    return url + "#" + addHash;
  }
  const curHash = url.substr(hashIndex + 1);
  if (curHash.indexOf("=") >= 0 || curHash.indexOf("?") >= 0) {
    return url + "&" + addHash;
  }
  if (curHash.length > 0) {
    return url + "?" + addHash;
  }
  return url + addHash;
};

// src/utils/getWebViewInitParams.ts
var INIT_PARAMS = "initParams";
var getWebViewInitParams = (locationHash) => {
  const initParams = urlParseHashParams(locationHash);
  const storedParams = SessionStorage.get(INIT_PARAMS);
  if (storedParams) {
    for (const [key, value] of Object.entries(storedParams)) {
      if (typeof initParams[key] === "undefined") {
        initParams[key] = value;
      }
    }
  }
  SessionStorage.set(INIT_PARAMS, initParams);
  return initParams;
};

// src/utils/isColorDark/isColorDark.ts
var isColorDark = (rgb) => {
  rgb = rgb.replace(/[\s#]/g, "");
  if (rgb.length === 3) {
    rgb = rgb[0] + rgb[0] + rgb[1] + rgb[1] + rgb[2] + rgb[2];
  }
  const r = parseInt(rgb.slice(0, 2), 16);
  const g = parseInt(rgb.slice(2, 4), 16);
  const b = parseInt(rgb.slice(4, 6), 16);
  const hsp = Math.sqrt(0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b));
  return hsp < 120;
};

// src/utils/isHTTPTypeProtocol/isHTTPTypeProtocol.ts
var isHTTPTypeProtocol = (protocol) => {
  return protocol === "http:" || protocol === "https:";
};

// src/utils/isTelegramHostname/isTelegramHostname.ts
var VALID_TELEGRAM_HOSTNAMES = ["t.me", "telegram.me", "telegram.dog"];
var isHostnameWithUsername = (hostname) => {
  return hostname.split(".").length > 2;
};
var isTelegramHostname = (hostname) => {
  let lowerCaseHostname = hostname.toLowerCase();
  if (isHostnameWithUsername(lowerCaseHostname)) {
    const [domain, subdomain] = hostname.split(".").reverse();
    lowerCaseHostname = `${subdomain}.${domain}`;
  }
  return VALID_TELEGRAM_HOSTNAMES.includes(lowerCaseHostname);
};

// src/utils/parseColorToHex.ts
var HEX_REGEXP = /^\s*#([0-9a-f]{6})\s*$/i;
var SHORT_HEX_REGEXP = /^\s*#([0-9a-f])([0-9a-f])([0-9a-f])\s*$/i;
var RGB_OR_RGBA_REGEXP = /^\s*rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+\.{0,1}\d*))?\)\s*$/;
var toHex = (value) => (value < 16 ? "0" : "") + value.toString(16);
var parseColorToHex = (color) => {
  if (typeof color !== "string" && typeof color !== "number") {
    return false;
  }
  const stringifiedColor = color.toString();
  const hexColorMatch = HEX_REGEXP.exec(stringifiedColor);
  if (hexColorMatch) {
    const hexColorWithoutHash = hexColorMatch[1].toLowerCase();
    return "#" + hexColorWithoutHash;
  }
  const shortHexColorMatch = SHORT_HEX_REGEXP.exec(stringifiedColor);
  if (shortHexColorMatch) {
    const [, r, g, b] = shortHexColorMatch;
    return ("#" + r + r + g + g + b + b).toLowerCase();
  }
  const rgbOrRgbaColorMatch = RGB_OR_RGBA_REGEXP.exec(stringifiedColor);
  if (rgbOrRgbaColorMatch) {
    const r = toHex(parseInt(rgbOrRgbaColorMatch[1]));
    const g = toHex(parseInt(rgbOrRgbaColorMatch[2]));
    const b = toHex(parseInt(rgbOrRgbaColorMatch[3]));
    return "#" + r + g + b;
  }
  return false;
};

// src/decorators/Initializers.ts
var _initizlizers;
var Initializers = class {
  constructor() {
    __privateAdd(this, _initizlizers, /* @__PURE__ */ new Set());
  }
  add(initializer) {
    __privateGet(this, _initizlizers).add(initializer);
  }
  invoke(instance) {
    __privateGet(this, _initizlizers).forEach((initializer) => initializer.call(instance));
  }
};
_initizlizers = new WeakMap();

// src/decorators/bind.ts
function bindMethod(_, context) {
  if (!(context.kind === "method")) {
    throw new TypeError(
      `'bindMethod' cannot decorate kinds different from 'method'. Passed kind: ${context.kind}.`
    );
  }
  if (context.private) {
    const name = String(context.name);
    throw new Error(`'bindMethod' cannot decorate private properties like ${name}.`);
  }
  context.addInitializer(function() {
    this[context.name] = this[context.name].bind(this);
  });
}
function bindMethods(classArg, context) {
  if (!(context.kind === "class")) {
    throw new TypeError(
      `'bindMethods' cannot decorate kinds different from 'class'. Passed kind: ${context.kind}.`
    );
  }
  const initizlizers = new Initializers();
  const addInitializer = (initializer) => {
    initizlizers.add(initializer);
  };
  const wrapper = function(...args) {
    const instance = new classArg(...args);
    initizlizers.invoke(instance);
    return instance;
  };
  wrapper.prototype = classArg.prototype;
  Object.getOwnPropertyNames(classArg).filter(
    (name) => name !== "length" && name !== "constructor" && name !== "prototype" && name !== "name"
  ).forEach((name) => {
    const descr = Object.getOwnPropertyDescriptor(classArg, name);
    Object.defineProperty(wrapper, name, descr);
  });
  const methods = Object.getOwnPropertyNames(classArg.prototype).filter(
    (name) => name !== "constructor"
  );
  methods.forEach((methodName) => {
    const descriptor = Object.getOwnPropertyDescriptor(classArg.prototype, methodName);
    if (descriptor?.value) {
      bindMethod(descriptor.value, {
        kind: "method",
        name: methodName,
        private: false,
        addInitializer
      });
    }
  });
  return wrapper;
}

// src/Errors/HapticFeedback/WebAppHapticFeedbackTypeInvalid.ts
var WebAppHapticFeedbackTypeInvalidError = class extends Error {
  constructor(type) {
    super(`[Telegram.WebApp] Haptic feedback type is invalid ${type}`);
  }
};

// src/Errors/HapticFeedback/WebAppHapticImpactStyleInvalid.ts
var WebAppHapticImpactStyleInvalidError = class extends Error {
  constructor(style) {
    super(`[Telegram.WebApp] Haptic impact style is invalid ${style}`);
  }
};

// src/Errors/HapticFeedback/WebAppHapticNotificationTypeInvalid.ts
var WebAppHapticNotificationTypeInvalidError = class extends Error {
  constructor(notification) {
    super(`[Telegram.WebApp] Haptic notification type is invalid ${notification}`);
  }
};

// src/Errors/Invoice/WebAppInvoiceOpened.ts
var WebAppInvoiceOpenedError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Invoice is already opened");
  }
};

// src/Errors/Invoice/WebAppInvoiceUrlInvalid.ts
var WebAppInvoiceUrlInvalidError = class extends Error {
  constructor(url) {
    super(`[Telegram.WebApp] Invoice url is invalid ${url}`);
  }
};

// src/Errors/Popup/WebAppPopupOpened.ts
var WebAppPopupOpenedError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Popup is already opened");
  }
};

// src/Errors/Popup/WebAppPopupParamInvalid.ts
var WebAppPopupParamInvalidError = class extends Error {
  constructor(invalidParamMessage) {
    super(`[Telegram.WebApp] Popup ${invalidParamMessage}`);
  }
};

// src/Errors/ScanQrPopup/WebAppScanQrPopupOpened.ts
var WebAppScanQrPopupOpenedError = class extends Error {
  constructor() {
    super("[Telegram.WebApp] Popup is already opened");
  }
};

// src/Errors/ScanQrPopup/WebAppScanQrPopupParamInvalid.ts
var WebAppScanQrPopupParamInvalidError = class extends Error {
  constructor(invalidParamMessage) {
    super(`[Telegram.WebApp] Scan QR popup ${invalidParamMessage}`);
  }
};

// src/Errors/UnsupportedVersion.ts
var UnsupportedVersionError = class extends RangeError {
  constructor(feature, method, version) {
    const message = `[Telegram.WebApp] ${method} from feature ${feature} is unavailable in version ${version}`;
    super(message);
  }
};

// src/Errors/WebAppBackgroundColorInvalid.ts
var WebAppBackgroundColorInvalidError = class extends Error {
  constructor(color) {
    super(`[Telegram.WebApp] Background color format is invalid ${color}`);
  }
};

// src/Errors/WebAppDataInvalid.ts
var WebAppDataInvalidError = class extends Error {
  constructor(invalidDataMessage) {
    super(`[Telegram.WebApp] Data ${invalidDataMessage}`);
  }
};

// src/Errors/WebAppHeaderColorKeyInvalid.ts
var WebAppHeaderColorKeyInvalidError = class extends Error {
  constructor(colorKeyOrColor) {
    super(
      `[Telegram.WebApp] Header color key should be one of Telegram.WebApp.themeParams.bg_color, Telegram.WebApp.themeParams.secondary_bg_color, 'bg_color', 'secondary_bg_color' ${colorKeyOrColor}`
    );
  }
};

// src/Errors/WebAppInlineChooseChatTypeInvalid.ts
var WebAppInlineChooseChatTypeInvalidError = class extends Error {
  constructor(invalidTypeMessage) {
    super(`[Telegram.WebApp] Choose chat ${invalidTypeMessage}`);
  }
};

// src/Errors/WebAppInlineModeDisabled.ts
var WebAppInlineModeDisabledError = class extends Error {
  constructor() {
    super(
      "[Telegram.WebApp] Inline mode is disabled for this bot. Read more about inline mode: https://core.telegram.org/bots/inline"
    );
  }
};

// src/Errors/WebAppInlineQueryInvalid.ts
var WebAppInlineQueryInvalidError = class extends Error {
  constructor(invalidQueryMessage) {
    super(`[Telegram.WebApp] Inline query ${invalidQueryMessage}`);
  }
};

// src/Errors/WebAppMainButtonParamInvalid.ts
var WebAppMainButtonParamInvalidError = class extends Error {
  constructor(invalidParamMessage) {
    super(`[Telegram.WebApp] Main button ${invalidParamMessage}`);
  }
};

// src/Errors/WebAppMethodUnsupported.ts
var WebAppMethodUnsupportedError = class extends Error {
  constructor(method, version) {
    super(`[Telegram.WebApp] Method ${method} is not supported in version ${version}`);
  }
};

// src/Errors/WebAppTelegramUrlInvalid.ts
var WebAppTelegramUrlInvalidError = class extends Error {
  constructor(invalidUrlMessage) {
    super(`[Telegram.WebApp] Url ${invalidUrlMessage}`);
  }
};

// src/decorators/wrapper.ts
var isStaticProperty = (name) => {
  return name !== "length" && name !== "constructor" && name !== "prototype" && name !== "name";
};
var copyPrototype = (from, to) => {
  const fromPrototype = Object.getPrototypeOf(from);
  Object.setPrototypeOf(to, fromPrototype);
};
var createWrapper = (wrappedClass) => {
  const initizlizers = new Initializers();
  const addInitializer = (initializer) => {
    initizlizers.add(initializer);
  };
  const wrapper = function(...args) {
    const instance = new wrappedClass(...args);
    initizlizers.invoke(instance);
    return instance;
  };
  copyPrototype(wrappedClass, wrapper);
  Object.getOwnPropertyNames(wrappedClass).filter(isStaticProperty).forEach((name) => {
    const descriptor = Object.getOwnPropertyDescriptor(wrappedClass, name);
    Object.defineProperty(wrapper, name, descriptor);
  });
  return { wrapper, addInitializer };
};

// src/decorators/FeatureSupport/FeatureSupport.ts
var _version, _getMethodsNames, getMethodsNames_fn, _mapMethodNameWithDescriptor, mapMethodNameWithDescriptor_fn, _isMethod, isMethod_fn, _decorateWhenFunc, decorateWhenFunc_fn;
var FeatureSupport = class {
  static set version(version) {
    __privateGet(this, _version) ?? __privateSet(this, _version, version);
  }
  static inVersion(versionOrConfig) {
    return (feature, context) => {
      if (!(context.kind === "class")) {
        throw new TypeError(
          `'FeatureSupport' cannot decorate kinds different from 'class'. Passed kind: ${context.kind}.`
        );
      }
      const { wrapper, addInitializer } = createWrapper(feature);
      const methods = __privateMethod(this, _getMethodsNames, getMethodsNames_fn).call(this, feature);
      methods.map(__privateMethod(this, _mapMethodNameWithDescriptor, mapMethodNameWithDescriptor_fn).call(this, feature)).filter(__privateMethod(this, _isMethod, isMethod_fn)).forEach(({ methodName, descriptor }) => {
        const originalMethod = descriptor.value;
        const decorateWhenString = ({
          feature: feature2,
          method,
          supportedVersion
        }) => {
          console.log("deorate when string");
          if (!__privateGet(this, _version).isSuitableTo(supportedVersion)) {
            throw new UnsupportedVersionError(feature2, method, __privateGet(this, _version).value);
          }
        };
        const decorateWhenFunc = (config) => __privateMethod(this, _decorateWhenFunc, decorateWhenFunc_fn).call(this, config);
        addInitializer(function() {
          const thisArg = this;
          descriptor.value = function(...args) {
            if (typeof versionOrConfig === "string") {
              return decorateWhenString({
                feature: feature.name,
                method: methodName,
                supportedVersion: versionOrConfig
              });
            }
            const executeOriginalMethod = () => originalMethod.apply(this, args);
            if (typeof versionOrConfig.methodsConfig === "function") {
              if (!versionOrConfig.availableInVersion) {
                throw new TypeError(`Property 'availableInVersion' required in config`);
              }
              const config = decorateWhenFunc({
                availableInVersion: versionOrConfig.availableInVersion,
                executeOriginalMethod,
                name: methodName,
                thisArg
              });
              return versionOrConfig.methodsConfig(config);
            }
            if (versionOrConfig.methodsConfig[methodName]) {
              const { availableInVersion, decorate } = versionOrConfig.methodsConfig[methodName];
              if (!versionOrConfig.availableInVersion && !availableInVersion) {
                throw new TypeError(
                  `Property 'availableInVersion' required either in top level config or in method ${methodName} config`
                );
              }
              const supportedVersion = availableInVersion ?? versionOrConfig.availableInVersion;
              if (!decorate) {
                return decorateWhenString({
                  feature: feature.name,
                  method: methodName,
                  supportedVersion
                });
              }
              const config = decorateWhenFunc({
                availableInVersion: supportedVersion,
                executeOriginalMethod,
                name: methodName,
                thisArg
              });
              return decorate(config);
            }
            return originalMethod.apply(this, args);
          };
          Object.defineProperty(feature.prototype, methodName, descriptor);
        });
      });
      return wrapper;
    };
  }
};
_version = new WeakMap();
_getMethodsNames = new WeakSet();
getMethodsNames_fn = function(obj) {
  const prototype = Object.getPrototypeOf(obj);
  return Object.getOwnPropertyNames(prototype).filter(
    (name) => name !== "constructor"
  );
};
_mapMethodNameWithDescriptor = new WeakSet();
mapMethodNameWithDescriptor_fn = function(obj) {
  const prototype = Object.getPrototypeOf(obj);
  return (methodName) => {
    const descriptor = Object.getOwnPropertyDescriptor(prototype, methodName);
    if (!descriptor) {
      throw new Error(`Cannot find descriptor for ${methodName}`);
    }
    return { methodName, descriptor };
  };
};
_isMethod = new WeakSet();
isMethod_fn = function({ descriptor }) {
  return Boolean(descriptor?.value);
};
_decorateWhenFunc = new WeakSet();
decorateWhenFunc_fn = function(config) {
  const isSupported = __privateGet(this, _version).isSuitableTo(config.availableInVersion);
  return { appVersion: __privateGet(this, _version).value, isSupported, ...config };
};
__privateAdd(FeatureSupport, _getMethodsNames);
__privateAdd(FeatureSupport, _mapMethodNameWithDescriptor);
__privateAdd(FeatureSupport, _isMethod);
__privateAdd(FeatureSupport, _decorateWhenFunc);
__privateAdd(FeatureSupport, _version, void 0);

// temp/esm/WebView.js
var _TelegramWebView_instances;
var _TelegramWebView_initParams;
var _TelegramWebView_eventHandlers;
var _TelegramWebView_isIframe;
var _TelegramWebView_iframeStyleEl;
var _TelegramWebView_subscribeToMessageFromParent;
var TELEGRAM_WEB_VIEW = {
  EVENTS: {
    SEND: {
      WEB_APP_READY: "web_app_ready",
      WEB_APP_EXPAND: "web_app_expand",
      WEB_APP_CLOSE: "web_app_close",
      WEB_APP_OPEN_POPUP: "web_app_open_popup",
      WEB_APP_SETUP_CLOSING_BEHAVIOR: "web_app_setup_closing_behavior",
      WEB_APP_SET_BACKGROUND_COLOR: "web_app_set_background_color",
      WEB_APP_SET_HEADER_COLOR: "web_app_set_header_color",
      WEB_APP_DATA_SEND: "web_app_data_send",
      WEB_APP_TRIGGER_HAPTIC_FEEDBACK: "web_app_trigger_haptic_feedback",
      WEB_APP_OPEN_LINK: "web_app_open_link",
      WEB_APP_OPEN_TG_LINK: "web_app_open_tg_link",
      WEB_APP_OPEN_INVOICE: "web_app_open_invoice",
      WEB_APP_REQUEST_VIEWPORT: "web_app_request_viewport",
      WEB_APP_REQUEST_THEME: "web_app_request_theme",
      WEB_APP_SETUP_MAIN_BUTTON: "web_app_setup_main_button",
      WEB_APP_SETUP_BACK_BUTTON: "web_app_setup_back_button",
      WEB_APP_OPEN_SCAN_QR_POPUP: "web_app_open_scan_qr_popup",
      WEB_APP_CLOSE_SCAN_QR_POPUP: "web_app_close_scan_qr_popup",
      WEB_APP_READ_TEXT_FROM_CLIPBOARD: "web_app_read_text_from_clipboard",
      WEB_APP_SWITCH_INLINE_QUERY: "web_app_switch_inline_query",
      PAYMENT_FORM_SUBMIT: "payment_form_submit",
      SHARE_SCORE: "share_score",
      SHARE_GAME: "share_game",
      GAME_OVER: "game_over",
      GAME_LOADED: "game_loaded",
      RESIZE_FRAME: "resize_frame"
    },
    RECEIVE: {
      MAIN_BUTTON_PRESSED: "main_button_pressed",
      SETTINGS_BUTTON_PRESSED: "settings_button_pressed",
      BACK_BUTTON_PRESSED: "back_button_pressed",
      INVOICE_CLOSED: "invoice_closed",
      VIEWPORT_CHANGED: "viewport_changed",
      THEME_CHANGED: "theme_changed",
      POPUP_CLOSED: "popup_closed",
      QR_TEXT_RECEIVED: "qr_text_received",
      SCAN_QR_POPUP_CLOSED: "scan_qr_popup_closed",
      CLIPBOARD_TEXT_RECEIVED: "clipboard_text_received"
    }
  }
};
var TelegramWebView = class {
  constructor(initParams) {
    _TelegramWebView_instances.add(this);
    _TelegramWebView_initParams.set(this, void 0);
    _TelegramWebView_eventHandlers.set(this, /* @__PURE__ */ new Map());
    _TelegramWebView_isIframe.set(this, window.parent != null && window != window.parent);
    _TelegramWebView_iframeStyleEl.set(this, null);
    Object.defineProperty(this, "postEvent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (eventType, callback, eventData = "") => {
        if (window.TelegramWebviewProxy) {
          window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));
          callback?.();
          return;
        }
        if (window.external && "notify" in window.external) {
          window.external.notify(JSON.stringify({ eventType, eventData }));
          callback?.();
          return;
        }
        if (__classPrivateFieldGet(this, _TelegramWebView_isIframe, "f")) {
          try {
            const trustedTarget = "*";
            window.parent.postMessage(JSON.stringify({ eventType, eventData }), trustedTarget);
            if (__classPrivateFieldGet(this, _TelegramWebView_initParams, "f").tgWebAppDebug) {
              console.log("[Telegram.WebView] postEvent via postMessage", eventType, eventData);
            }
            callback?.();
          } catch (e) {
            callback?.(e);
          }
        }
        if (__classPrivateFieldGet(this, _TelegramWebView_initParams, "f").tgWebAppDebug) {
          console.log("[Telegram.WebView] postEvent", eventType, eventData);
        }
        callback?.({ notAvailable: true });
      }
    });
    Object.defineProperty(this, "onEvent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (eventType, callback) => {
        if (!__classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").has(eventType)) {
          __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").set(eventType, /* @__PURE__ */ new Set());
        }
        __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").get(eventType).add(callback);
      }
    });
    Object.defineProperty(this, "offEvent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (eventType, callback) => {
        if (!__classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").has(eventType)) {
          return;
        }
        __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").get(eventType).delete(callback);
      }
    });
    Object.defineProperty(this, "callEventCallbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (eventType, func) => {
        const eventHandlers = __classPrivateFieldGet(this, _TelegramWebView_eventHandlers, "f").get(eventType);
        eventHandlers?.forEach((handler) => {
          try {
            func(handler);
          } catch {
          }
        });
      }
    });
    Object.defineProperty(this, "receiveEvent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (eventType, eventData) => {
        this.callEventCallbacks(eventType, (callback) => callback(eventType, eventData));
      }
    });
    __classPrivateFieldSet(this, _TelegramWebView_initParams, initParams, "f");
    if (__classPrivateFieldGet(this, _TelegramWebView_isIframe, "f")) {
      __classPrivateFieldSet(this, _TelegramWebView_iframeStyleEl, document.createElement("style"), "f");
      document.head.appendChild(__classPrivateFieldGet(this, _TelegramWebView_iframeStyleEl, "f"));
      __classPrivateFieldGet(this, _TelegramWebView_instances, "m", _TelegramWebView_subscribeToMessageFromParent).call(this);
      try {
        window.parent.postMessage(JSON.stringify({ eventType: "iframe_ready" }), "*");
      } catch {
      }
    }
  }
  get initParams() {
    return __classPrivateFieldGet(this, _TelegramWebView_initParams, "f");
  }
  get isIframe() {
    return __classPrivateFieldGet(this, _TelegramWebView_isIframe, "f");
  }
};
_TelegramWebView_initParams = /* @__PURE__ */ new WeakMap(), _TelegramWebView_eventHandlers = /* @__PURE__ */ new WeakMap(), _TelegramWebView_isIframe = /* @__PURE__ */ new WeakMap(), _TelegramWebView_iframeStyleEl = /* @__PURE__ */ new WeakMap(), _TelegramWebView_instances = /* @__PURE__ */ new WeakSet(), _TelegramWebView_subscribeToMessageFromParent = function _TelegramWebView_subscribeToMessageFromParent2() {
  window.addEventListener("message", (event) => {
    if (event.source !== window.parent) {
      return;
    }
    try {
      const dataParsed = JSON.parse(event.data);
      if (!dataParsed.eventType) {
        return;
      }
      if (dataParsed.eventType === "set_custom_style" && __classPrivateFieldGet(this, _TelegramWebView_iframeStyleEl, "f")) {
        __classPrivateFieldGet(this, _TelegramWebView_iframeStyleEl, "f").innerHTML = dataParsed.eventData;
        return;
      }
      this.receiveEvent(dataParsed.eventType, dataParsed.eventData);
    } catch {
    }
  });
};

// temp/esm/WebApp/BackButton/BackButton.js
var BACK_BUTTON_EVENTS = {
  UPDATED: "updated",
  CLICKED: "clicked",
  OFF_CLICKED: "off_clicked"
};
var BACK_BUTTON_ON_EVENT_KEY = Symbol("on_event");
var WebAppBackButton = (() => {
  var _instances, _eventEmitter, _isVisible, _prevButtonState, _update, _setParams;
  let _classDecorators = [FeatureSupport.inVersion({
    availableInVersion: "6.1",
    methodsConfig: ({ appVersion, executeOriginalMethod, isSupported, thisArg }) => {
      if (!isSupported) {
        console.warn(`[Telegram.WebApp] BackButton is not supported in version ${appVersion}`);
        return thisArg;
      }
      return executeOriginalMethod();
    }
  }), bindMethods];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var WebAppBackButton2 = _classThis = class {
    constructor({ eventEmitter }) {
      _instances.add(this);
      _eventEmitter.set(this, void 0);
      _isVisible.set(this, false);
      _prevButtonState.set(this, __classPrivateFieldGet(this, _isVisible, "f"));
      __classPrivateFieldSet(this, _eventEmitter, eventEmitter, "f");
    }
    [(_eventEmitter = /* @__PURE__ */ new WeakMap(), _isVisible = /* @__PURE__ */ new WeakMap(), _prevButtonState = /* @__PURE__ */ new WeakMap(), _instances = /* @__PURE__ */ new WeakSet(), _update = function _update2() {
      const newState = __classPrivateFieldGet(this, _isVisible, "f");
      if (__classPrivateFieldGet(this, _prevButtonState, "f") === newState) {
        return;
      }
      __classPrivateFieldSet(this, _prevButtonState, newState, "f");
      __classPrivateFieldGet(this, _eventEmitter, "f").emit(BACK_BUTTON_EVENTS.UPDATED, { is_visible: __classPrivateFieldGet(this, _isVisible, "f") });
    }, _setParams = function _setParams2(params) {
      if (typeof params.is_visible !== "undefined") {
        __classPrivateFieldSet(this, _isVisible, Boolean(params.is_visible), "f");
      }
      __classPrivateFieldGet(this, _instances, "m", _update).call(this);
      return this;
    }, BACK_BUTTON_ON_EVENT_KEY)](event, listener) {
      return __classPrivateFieldGet(this, _eventEmitter, "f").subscribe(event, listener);
    }
    onClick(callback) {
      __classPrivateFieldGet(this, _eventEmitter, "f").emit(BACK_BUTTON_EVENTS.CLICKED, callback);
      return this;
    }
    offClick(callback) {
      __classPrivateFieldGet(this, _eventEmitter, "f").emit(BACK_BUTTON_EVENTS.OFF_CLICKED, callback);
      return this;
    }
    show() {
      return __classPrivateFieldGet(this, _instances, "m", _setParams).call(this, { is_visible: true });
    }
    hide() {
      return __classPrivateFieldGet(this, _instances, "m", _setParams).call(this, { is_visible: false });
    }
    get isVisible() {
      return __classPrivateFieldGet(this, _isVisible, "f");
    }
    set isVisible(visible) {
      __classPrivateFieldGet(this, _instances, "m", _setParams).call(this, { is_visible: visible });
    }
  };
  __setFunctionName(_classThis, "WebAppBackButton");
  (() => {
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name }, null, _classExtraInitializers);
    WebAppBackButton2 = _classThis = _classDescriptor.value;
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return WebAppBackButton2 = _classThis;
})();

// temp/esm/WebApp/Theme.js
var _Theme_instances;
var _Theme_eventEmitter;
var _Theme_themeParams;
var _Theme_colorScheme;
var _Theme_toJSON;
var _Theme_defineColorScheme;
var _Theme_setColorScheme;
var THEME_EVENTS = {
  COLOR_SCHEME_CHANGED: "color_scheme_changed",
  THEME_PARAM_SET: "theme_param_set",
  THEME_PARAMS_CHANGED: "theme_params_changed"
};
var TELEGRAM_THEME = {
  COLOR_SCHEMES: {
    LIGHT: "light",
    DARK: "dark"
  },
  PARAMS: {
    BG_COLOR: "bg_color",
    TEXT_COLOR: "text_color",
    HINT_COLOR: "hint_color",
    LINK_COLOR: "link_color",
    BUTTON_COLOR: "button_color",
    BUTTON_TEXT_COLOR: "button_text_color",
    SECONDARY_BG_COLOR: "secondary_bg_color"
  },
  HEADER_COLOR: {
    BG_COLOR: "bg_color",
    SECONDARY_BG_COLOR: "secondary_bg_color"
  }
};
var Theme = class {
  static get EVENTS() {
    return THEME_EVENTS;
  }
  constructor(eventEmitter) {
    _Theme_instances.add(this);
    _Theme_eventEmitter.set(this, void 0);
    _Theme_themeParams.set(this, /* @__PURE__ */ new Map());
    _Theme_colorScheme.set(this, TELEGRAM_THEME.COLOR_SCHEMES.LIGHT);
    _Theme_toJSON.set(this, () => Object.fromEntries(__classPrivateFieldGet(this, _Theme_themeParams, "f")));
    Object.defineProperty(this, "setParams", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (params) => {
        if (params.bg_color === "#1c1c1d" && params.bg_color === params.secondary_bg_color) {
          params.secondary_bg_color = "#2c2c2e";
        }
        for (const key in params) {
          const color = parseColorToHex(params[key]);
          if (color) {
            this.setParam(key, color);
            if (key === "bg_color") {
              const colorScheme = __classPrivateFieldGet(this, _Theme_instances, "m", _Theme_defineColorScheme).call(this, color);
              __classPrivateFieldGet(this, _Theme_instances, "m", _Theme_setColorScheme).call(this, colorScheme);
            }
            __classPrivateFieldGet(this, _Theme_eventEmitter, "f").emit(Theme.EVENTS.THEME_PARAM_SET, key, color);
          }
        }
        __classPrivateFieldGet(this, _Theme_eventEmitter, "f").emit(Theme.EVENTS.THEME_PARAMS_CHANGED, this.params);
      }
    });
    __classPrivateFieldSet(this, _Theme_eventEmitter, eventEmitter, "f");
  }
  on(event, listener) {
    return __classPrivateFieldGet(this, _Theme_eventEmitter, "f").subscribe(event, listener);
  }
  getParam(key) {
    return __classPrivateFieldGet(this, _Theme_themeParams, "f").get(key) ?? null;
  }
  setParam(key, value) {
    __classPrivateFieldGet(this, _Theme_themeParams, "f").set(key, value);
  }
  get params() {
    return __classPrivateFieldGet(this, _Theme_toJSON, "f").call(this);
  }
  get colorScheme() {
    return __classPrivateFieldGet(this, _Theme_colorScheme, "f");
  }
};
_Theme_eventEmitter = /* @__PURE__ */ new WeakMap(), _Theme_themeParams = /* @__PURE__ */ new WeakMap(), _Theme_colorScheme = /* @__PURE__ */ new WeakMap(), _Theme_toJSON = /* @__PURE__ */ new WeakMap(), _Theme_instances = /* @__PURE__ */ new WeakSet(), _Theme_defineColorScheme = function _Theme_defineColorScheme2(color) {
  return isColorDark(color) ? TELEGRAM_THEME.COLOR_SCHEMES.DARK : TELEGRAM_THEME.COLOR_SCHEMES.LIGHT;
}, _Theme_setColorScheme = function _Theme_setColorScheme2(colorScheme) {
  __classPrivateFieldSet(this, _Theme_colorScheme, colorScheme, "f");
  __classPrivateFieldGet(this, _Theme_eventEmitter, "f").emit(Theme.EVENTS.COLOR_SCHEME_CHANGED, colorScheme);
};

// temp/esm/WebApp/BackgroundColor.js
var _BackgroundColor_instances;
var _BackgroundColor_eventEmitter;
var _BackgroundColor_themeParams;
var _BackgroundColor_backgroundColorKeyOrColor;
var _BackgroundColor_appBackgroundColor;
var _BackgroundColor_getBgColor;
var BackgroundColor = class {
  static get EVENTS() {
    return { UPDATED: "updated" };
  }
  constructor({ eventEmitter, themeParams }) {
    _BackgroundColor_instances.add(this);
    _BackgroundColor_eventEmitter.set(this, void 0);
    _BackgroundColor_themeParams.set(this, void 0);
    _BackgroundColor_backgroundColorKeyOrColor.set(this, TELEGRAM_THEME.HEADER_COLOR.BG_COLOR);
    _BackgroundColor_appBackgroundColor.set(this, null);
    Object.defineProperty(this, "get", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        if (__classPrivateFieldGet(this, _BackgroundColor_backgroundColorKeyOrColor, "f") === TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
          return __classPrivateFieldGet(this, _BackgroundColor_themeParams, "f").call(this).secondary_bg_color;
        }
        if (__classPrivateFieldGet(this, _BackgroundColor_backgroundColorKeyOrColor, "f") === TELEGRAM_THEME.HEADER_COLOR.BG_COLOR) {
          return __classPrivateFieldGet(this, _BackgroundColor_themeParams, "f").call(this).bg_color;
        }
        return __classPrivateFieldGet(this, _BackgroundColor_backgroundColorKeyOrColor, "f");
      }
    });
    Object.defineProperty(this, "update", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        const color = this.get();
        if (__classPrivateFieldGet(this, _BackgroundColor_appBackgroundColor, "f") != color) {
          __classPrivateFieldSet(this, _BackgroundColor_appBackgroundColor, color, "f");
          __classPrivateFieldGet(this, _BackgroundColor_eventEmitter, "f").emit(BackgroundColor.EVENTS.UPDATED, color);
        }
      }
    });
    Object.defineProperty(this, "set", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (color) => {
        __classPrivateFieldSet(this, _BackgroundColor_backgroundColorKeyOrColor, __classPrivateFieldGet(this, _BackgroundColor_instances, "m", _BackgroundColor_getBgColor).call(this, color), "f");
        this.update();
      }
    });
    __classPrivateFieldSet(this, _BackgroundColor_eventEmitter, eventEmitter, "f");
    __classPrivateFieldSet(this, _BackgroundColor_themeParams, themeParams, "f");
  }
  on(event, listener) {
    return __classPrivateFieldGet(this, _BackgroundColor_eventEmitter, "f").subscribe(event, listener);
  }
};
_BackgroundColor_eventEmitter = /* @__PURE__ */ new WeakMap(), _BackgroundColor_themeParams = /* @__PURE__ */ new WeakMap(), _BackgroundColor_backgroundColorKeyOrColor = /* @__PURE__ */ new WeakMap(), _BackgroundColor_appBackgroundColor = /* @__PURE__ */ new WeakMap(), _BackgroundColor_instances = /* @__PURE__ */ new WeakSet(), _BackgroundColor_getBgColor = function _BackgroundColor_getBgColor2(color) {
  if (color === TELEGRAM_THEME.HEADER_COLOR.BG_COLOR || color === TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
    return color;
  }
  const bgColor = parseColorToHex(color);
  if (!bgColor) {
    throw new WebAppBackgroundColorInvalidError(color);
  }
  return bgColor;
};

// temp/esm/WebApp/Clipboard.js
var _WebAppClipboard_requests;
var WebAppClipboard = class {
  constructor() {
    _WebAppClipboard_requests.set(this, /* @__PURE__ */ new Map());
  }
  setRequest(id, callback) {
    __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").set(id, callback ?? null);
  }
  getRequest(id) {
    return __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").get(id) ?? null;
  }
  removeRequest(id) {
    __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").delete(id);
  }
  hasRequest(id) {
    return __classPrivateFieldGet(this, _WebAppClipboard_requests, "f").has(id);
  }
};
_WebAppClipboard_requests = /* @__PURE__ */ new WeakMap();

// temp/esm/WebApp/HapticFeedback.js
var TELEGRAM_HAPTIC_FEEDBACK = {
  IMPACT_STYLES: {
    LIGHT: "light",
    MEDIUM: "medium",
    HEAVY: "heavy",
    RIGID: "rigid",
    SOFT: "soft"
  },
  FEEDBACK_TYPES: {
    IMPACT: "impact",
    NOTIFICATION: "notification",
    SELECTION_CHANGE: "selection_change"
  },
  NOTIFICATION_TYPES: {
    ERROR: "error",
    SUCCESS: "success",
    WARNING: "warning"
  }
};
var VALID_IMPACT_STYLES = Object.values(TELEGRAM_HAPTIC_FEEDBACK.IMPACT_STYLES);
var VALID_FEEDBACK_TYPES = Object.values(TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES);
var VALID_NOTIFICATION_TYPES = Object.values(TELEGRAM_HAPTIC_FEEDBACK.NOTIFICATION_TYPES);
var HAPTIC_FEEDBACK_EVENTS = {
  FEEDBACK_TRIGGERED: "feedback_triggered"
};
var ON_EVENT = Symbol("on_event");
var WebAppHapticFeedback = (() => {
  var _instances, _eventEmitter, _isValidImpactStyle, _isValidFeedbackType, _isValidNotificationType, _triggerFeedback;
  let _classDecorators = [FeatureSupport.inVersion({
    availableInVersion: "6.1",
    methodsConfig: ({ appVersion, executeOriginalMethod, isSupported, thisArg }) => {
      if (!isSupported) {
        console.warn(`[Telegram.WebApp] HapticFeedback is not supported in version ${appVersion}`);
        return thisArg;
      }
      return executeOriginalMethod();
    }
  }), bindMethods];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var WebAppHapticFeedback2 = _classThis = class {
    static get EVENTS() {
      return HAPTIC_FEEDBACK_EVENTS;
    }
    static get PRIVATE_KEYS() {
      return { ON_EVENT };
    }
    constructor(eventEmitter) {
      _instances.add(this);
      _eventEmitter.set(this, void 0);
      __classPrivateFieldSet(this, _eventEmitter, eventEmitter, "f");
    }
    [(_eventEmitter = /* @__PURE__ */ new WeakMap(), _instances = /* @__PURE__ */ new WeakSet(), _isValidImpactStyle = function _isValidImpactStyle2(style) {
      if (!style) {
        return false;
      }
      return VALID_IMPACT_STYLES.includes(style);
    }, _isValidFeedbackType = function _isValidFeedbackType2(type) {
      return VALID_FEEDBACK_TYPES.includes(type);
    }, _isValidNotificationType = function _isValidNotificationType2(type) {
      if (!type) {
        return false;
      }
      return VALID_NOTIFICATION_TYPES.includes(type);
    }, _triggerFeedback = function _triggerFeedback2(params) {
      if (!__classPrivateFieldGet(this, _instances, "m", _isValidFeedbackType).call(this, params.type)) {
        throw new WebAppHapticFeedbackTypeInvalidError(params.type);
      }
      if (params.type === TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.IMPACT) {
        if (!__classPrivateFieldGet(this, _instances, "m", _isValidImpactStyle).call(this, params.impact_style)) {
          throw new WebAppHapticImpactStyleInvalidError(params.impact_style);
        }
      }
      if (params.type === TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.NOTIFICATION) {
        if (!__classPrivateFieldGet(this, _instances, "m", _isValidNotificationType).call(this, params.notification_type)) {
          throw new WebAppHapticNotificationTypeInvalidError(params.notification_type);
        }
      }
      if (params.type === TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.SELECTION_CHANGE) {
      }
      __classPrivateFieldGet(this, _eventEmitter, "f").emit(WebAppHapticFeedback2.EVENTS.FEEDBACK_TRIGGERED, params);
      return this;
    }, ON_EVENT)](event, listener) {
      return __classPrivateFieldGet(this, _eventEmitter, "f").subscribe(event, listener);
    }
    impactOccurred(style) {
      return __classPrivateFieldGet(this, _instances, "m", _triggerFeedback).call(this, {
        type: TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.IMPACT,
        impact_style: style
      });
    }
    notificationOccurred(type) {
      return __classPrivateFieldGet(this, _instances, "m", _triggerFeedback).call(this, {
        type: TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.NOTIFICATION,
        notification_type: type
      });
    }
    selectionChanged() {
      return __classPrivateFieldGet(this, _instances, "m", _triggerFeedback).call(this, {
        type: TELEGRAM_HAPTIC_FEEDBACK.FEEDBACK_TYPES.SELECTION_CHANGE
      });
    }
  };
  __setFunctionName(_classThis, "WebAppHapticFeedback");
  (() => {
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name }, null, _classExtraInitializers);
    WebAppHapticFeedback2 = _classThis = _classDescriptor.value;
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return WebAppHapticFeedback2 = _classThis;
})();

// temp/esm/WebApp/InitData.js
var _InitData_initDataRaw;
var _InitData_initDataUnsafeParsed;
var isWrappedInCurlyBrackets = (value) => {
  return value[0] === "{" && value.at(-1) === "}";
};
var isWrappedInSquareBrackets = (value) => {
  return value[0] === "[" && value.at(-1) === "]";
};
var isWrappedInBrackets = (value) => {
  return isWrappedInCurlyBrackets(value) || isWrappedInSquareBrackets(value);
};
var InitData = class {
  constructor(initData) {
    _InitData_initDataRaw.set(this, "");
    _InitData_initDataUnsafeParsed.set(this, /* @__PURE__ */ new Map());
    if (!initData) {
      return;
    }
    __classPrivateFieldSet(this, _InitData_initDataRaw, initData, "f");
    const initDataUnsafeParsed = urlParseQueryString(__classPrivateFieldGet(this, _InitData_initDataRaw, "f"));
    for (const [key, value] of Object.entries(initDataUnsafeParsed)) {
      if (!isWrappedInBrackets(value)) {
        continue;
      }
      try {
        __classPrivateFieldGet(this, _InitData_initDataUnsafeParsed, "f").set(key, JSON.parse(value));
      } catch {
      }
    }
  }
  get rawData() {
    return __classPrivateFieldGet(this, _InitData_initDataRaw, "f");
  }
  get unsafeData() {
    return Object.fromEntries(__classPrivateFieldGet(this, _InitData_initDataUnsafeParsed, "f"));
  }
};
_InitData_initDataRaw = /* @__PURE__ */ new WeakMap(), _InitData_initDataUnsafeParsed = /* @__PURE__ */ new WeakMap();

// temp/esm/WebApp/Invoices.js
var _Invoices_store;
var INVOICE_REGEX = /^\/(\$|invoice\/)([A-Za-z0-9\-_=]+)$/;
var Invoices = class {
  constructor() {
    _Invoices_store.set(this, /* @__PURE__ */ new Map());
  }
  create(url) {
    const { hostname, pathname, protocol } = new URL(url);
    const match = pathname.match(INVOICE_REGEX) ?? [];
    const slug = match[2];
    if (!isHTTPTypeProtocol(protocol) || !isTelegramHostname(hostname) || !slug) {
      throw new WebAppInvoiceUrlInvalidError(url);
    }
    if (__classPrivateFieldGet(this, _Invoices_store, "f").has(slug)) {
      throw new WebAppInvoiceOpenedError();
    }
    return slug;
  }
  save(slug, data) {
    __classPrivateFieldGet(this, _Invoices_store, "f").set(slug, data);
  }
  remove(slug) {
    const invoiceData = __classPrivateFieldGet(this, _Invoices_store, "f").get(slug);
    __classPrivateFieldGet(this, _Invoices_store, "f").delete(slug);
    return invoiceData ?? null;
  }
  has(slug) {
    return __classPrivateFieldGet(this, _Invoices_store, "f").has(slug);
  }
};
_Invoices_store = /* @__PURE__ */ new WeakMap();

// temp/esm/WebApp/MainButtonDebug.js
var _MainButtonDebug_btn;
var _MainButtonDebug_height;
var _MainButtonDebug_onUpdate;
var BACKGROUND_IMAGE = "url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20viewport%3D%220%200%2048%2048%22%20width%3D%2248px%22%20height%3D%2248px%22%3E%3Ccircle%20cx%3D%2250%25%22%20cy%3D%2250%25%22%20stroke%3D%22%23fff%22%20stroke-width%3D%222.25%22%20stroke-linecap%3D%22round%22%20fill%3D%22none%22%20stroke-dashoffset%3D%22106%22%20r%3D%229%22%20stroke-dasharray%3D%2256.52%22%20rotate%3D%22-90%22%3E%3Canimate%20attributeName%3D%22stroke-dashoffset%22%20attributeType%3D%22XML%22%20dur%3D%22360s%22%20from%3D%220%22%20to%3D%2212500%22%20repeatCount%3D%22indefinite%22%3E%3C%2Fanimate%3E%3CanimateTransform%20attributeName%3D%22transform%22%20attributeType%3D%22XML%22%20type%3D%22rotate%22%20dur%3D%221s%22%20from%3D%22-90%2024%2024%22%20to%3D%22630%2024%2024%22%20repeatCount%3D%22indefinite%22%3E%3C%2FanimateTransform%3E%3C%2Fcircle%3E%3C%2Fsvg%3E')";
var MainButtonDebug = class {
  constructor({ onClick, onUpdate }) {
    _MainButtonDebug_btn.set(this, void 0);
    _MainButtonDebug_height.set(this, 0);
    _MainButtonDebug_onUpdate.set(this, void 0);
    Object.defineProperty(this, "update", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (params) => {
        if (params.is_visible) {
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.display = "block";
          __classPrivateFieldSet(this, _MainButtonDebug_height, 48, "f");
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.opacity = params.is_active ? "1" : "0.8";
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.cursor = params.is_active ? "pointer" : "auto";
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").disabled = !params.is_active;
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").innerText = params.text;
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.backgroundImage = params.is_progress_visible ? BACKGROUND_IMAGE : "none";
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.backgroundColor = params.color;
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.color = params.text_color;
        } else {
          __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style.display = "none";
          __classPrivateFieldSet(this, _MainButtonDebug_height, 0, "f");
        }
        if (document.documentElement) {
          document.documentElement.style.boxSizing = "border-box";
          document.documentElement.style.paddingBottom = __classPrivateFieldGet(this, _MainButtonDebug_height, "f") + "px";
        }
        __classPrivateFieldGet(this, _MainButtonDebug_onUpdate, "f").call(this);
      }
    });
    __classPrivateFieldSet(this, _MainButtonDebug_onUpdate, onUpdate, "f");
    __classPrivateFieldSet(this, _MainButtonDebug_btn, document.createElement("tg-main-button"), "f");
    const styles = {
      font: "600 14px/18px sans-serif",
      display: "none",
      width: "100%",
      height: "48px",
      borderRadius: "0",
      background: "no-repeat right center",
      position: "fixed",
      left: "0",
      right: "0",
      bottom: "0",
      margin: "0",
      padding: "15px 20px",
      textAlign: "center",
      boxSizing: "border-box",
      zIndex: "10000"
    };
    for (const [key, value] of Object.entries(styles)) {
      __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").style[key] = value;
    }
    const onDomLoaded = () => {
      document.removeEventListener("DOMContentLoaded", onDomLoaded);
      document.body.appendChild(__classPrivateFieldGet(this, _MainButtonDebug_btn, "f"));
      __classPrivateFieldGet(this, _MainButtonDebug_btn, "f").addEventListener("click", onClick, false);
    };
    document.addEventListener("DOMContentLoaded", onDomLoaded);
  }
};
_MainButtonDebug_btn = /* @__PURE__ */ new WeakMap(), _MainButtonDebug_height = /* @__PURE__ */ new WeakMap(), _MainButtonDebug_onUpdate = /* @__PURE__ */ new WeakMap();

// temp/esm/WebApp/MainButton.js
var _WebAppMainButton_instances;
var _WebAppMainButton_eventEmitter;
var _WebAppMainButton_theme;
var _WebAppMainButton_isVisible;
var _WebAppMainButton_isActive;
var _WebAppMainButton_isProgressVisible;
var _WebAppMainButton_buttonText;
var _WebAppMainButton_buttonColor;
var _WebAppMainButton_buttonTextColor;
var _WebAppMainButton_isDebug;
var _WebAppMainButton_prevButtonState;
var _WebAppMainButton_debugBtn;
var _WebAppMainButton_buttonParams;
var _WebAppMainButton_update;
var _WebAppMainButton_isResettedValue;
var _WebAppMainButton_setText;
var _WebAppMainButton_setButtonColor;
var _WebAppMainButton_setTextColor;
var _WebAppMainButton_setIsVisible;
var _WebAppMainButton_setIsActive;
var BUTTON_EVENTS = {
  DEBUG_BUTTON_CLICKED: "debug_button_clicked",
  DEBUG_BUTTON_UPDATED: "debug_button_updated",
  UPDATED: "updated",
  CLICKED: "clicked",
  OFF_CLICKED: "off_clicked"
};
var TELEGRAM_MAIN_BUTTON = {
  MAX_TEXT_LENGTH: 64,
  DEFAULT_COLOR: "#2481cc",
  DEFAULT_TEXT_COLOR: "#ffffff"
};
var WebAppMainButton = class {
  static get EVENTS() {
    return BUTTON_EVENTS;
  }
  constructor({ eventEmitter, theme, isDebug = false }) {
    _WebAppMainButton_instances.add(this);
    _WebAppMainButton_eventEmitter.set(this, void 0);
    _WebAppMainButton_theme.set(this, void 0);
    _WebAppMainButton_isVisible.set(this, false);
    _WebAppMainButton_isActive.set(this, true);
    _WebAppMainButton_isProgressVisible.set(this, false);
    _WebAppMainButton_buttonText.set(this, "CONTINUE");
    _WebAppMainButton_buttonColor.set(this, false);
    _WebAppMainButton_buttonTextColor.set(this, false);
    _WebAppMainButton_isDebug.set(this, void 0);
    _WebAppMainButton_prevButtonState.set(this, null);
    _WebAppMainButton_debugBtn.set(this, null);
    Object.defineProperty(this, "setParams", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (params) => {
        var _a, _b, _c, _d, _e;
        __classPrivateFieldGet(_a = __classPrivateFieldGet(_b = __classPrivateFieldGet(_c = __classPrivateFieldGet(_d = __classPrivateFieldGet(_e = __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_setText).call(this, params.text), _WebAppMainButton_instances, "m", _WebAppMainButton_setButtonColor).call(_e, params.color), _WebAppMainButton_instances, "m", _WebAppMainButton_setTextColor).call(_d, params.text_color), _WebAppMainButton_instances, "m", _WebAppMainButton_setIsVisible).call(_c, params.is_visible), _WebAppMainButton_instances, "m", _WebAppMainButton_setIsActive).call(_b, params.is_active), _WebAppMainButton_instances, "m", _WebAppMainButton_update).call(_a);
        return this;
      }
    });
    Object.defineProperty(this, "setText", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (text) => this.setParams({ text })
    });
    Object.defineProperty(this, "onClick", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (callback) => {
        __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.CLICKED, callback);
        return this;
      }
    });
    Object.defineProperty(this, "offClick", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (callback) => {
        __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.OFF_CLICKED, callback);
        return this;
      }
    });
    Object.defineProperty(this, "show", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => this.setParams({ is_visible: true })
    });
    Object.defineProperty(this, "hide", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => this.setParams({ is_visible: false })
    });
    Object.defineProperty(this, "enable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => this.setParams({ is_active: true })
    });
    Object.defineProperty(this, "disable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => this.setParams({ is_active: false })
    });
    Object.defineProperty(this, "showProgress", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (leaveActive) => {
        this.isActive = Boolean(leaveActive);
        __classPrivateFieldSet(this, _WebAppMainButton_isProgressVisible, true, "f");
        __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_update).call(this);
        return this;
      }
    });
    Object.defineProperty(this, "hideProgress", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        if (!this.isActive) {
          this.isActive = true;
        }
        __classPrivateFieldSet(this, _WebAppMainButton_isProgressVisible, false, "f");
        __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_update).call(this);
        return this;
      }
    });
    __classPrivateFieldSet(this, _WebAppMainButton_eventEmitter, eventEmitter, "f");
    __classPrivateFieldSet(this, _WebAppMainButton_theme, theme, "f");
    __classPrivateFieldSet(this, _WebAppMainButton_isDebug, isDebug, "f");
    if (isDebug) {
      __classPrivateFieldSet(this, _WebAppMainButton_debugBtn, new MainButtonDebug({
        onClick: () => {
          __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.DEBUG_BUTTON_CLICKED, this.isActive);
        },
        onUpdate: () => {
          __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.DEBUG_BUTTON_UPDATED);
        }
      }), "f");
    }
  }
  on(event, listener) {
    return __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").subscribe(event, listener);
  }
  set text(text) {
    this.setParams({ text });
  }
  get text() {
    return __classPrivateFieldGet(this, _WebAppMainButton_buttonText, "f");
  }
  set color(color) {
    this.setParams({ color });
  }
  get color() {
    return __classPrivateFieldGet(this, _WebAppMainButton_buttonColor, "f") || __classPrivateFieldGet(this, _WebAppMainButton_theme, "f").getParam(TELEGRAM_THEME.PARAMS.BUTTON_COLOR) || TELEGRAM_MAIN_BUTTON.DEFAULT_COLOR;
  }
  set textColor(value) {
    this.setParams({ text_color: value });
  }
  get textColor() {
    return __classPrivateFieldGet(this, _WebAppMainButton_buttonTextColor, "f") || __classPrivateFieldGet(this, _WebAppMainButton_theme, "f").getParam(TELEGRAM_THEME.PARAMS.BUTTON_TEXT_COLOR) || TELEGRAM_MAIN_BUTTON.DEFAULT_TEXT_COLOR;
  }
  set isVisible(visible) {
    this.setParams({ is_visible: visible });
  }
  get isVisible() {
    return __classPrivateFieldGet(this, _WebAppMainButton_isVisible, "f");
  }
  get isProgressVisible() {
    return __classPrivateFieldGet(this, _WebAppMainButton_isProgressVisible, "f");
  }
  set isActive(active) {
    this.setParams({ is_active: active });
  }
  get isActive() {
    return __classPrivateFieldGet(this, _WebAppMainButton_isActive, "f");
  }
};
_WebAppMainButton_eventEmitter = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_theme = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_isVisible = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_isActive = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_isProgressVisible = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_buttonText = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_buttonColor = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_buttonTextColor = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_isDebug = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_prevButtonState = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_debugBtn = /* @__PURE__ */ new WeakMap(), _WebAppMainButton_instances = /* @__PURE__ */ new WeakSet(), _WebAppMainButton_buttonParams = function _WebAppMainButton_buttonParams2() {
  return {
    is_visible: __classPrivateFieldGet(this, _WebAppMainButton_isVisible, "f"),
    is_active: __classPrivateFieldGet(this, _WebAppMainButton_isActive, "f"),
    is_progress_visible: __classPrivateFieldGet(this, _WebAppMainButton_isProgressVisible, "f"),
    text: __classPrivateFieldGet(this, _WebAppMainButton_buttonText, "f"),
    color: this.color,
    text_color: this.textColor
  };
}, _WebAppMainButton_update = function _WebAppMainButton_update2() {
  const btnParams = __classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_buttonParams).call(this);
  const newState = JSON.stringify(btnParams);
  if (__classPrivateFieldGet(this, _WebAppMainButton_prevButtonState, "f") === newState) {
    return;
  }
  __classPrivateFieldSet(this, _WebAppMainButton_prevButtonState, newState, "f");
  __classPrivateFieldGet(this, _WebAppMainButton_eventEmitter, "f").emit(WebAppMainButton.EVENTS.UPDATED, btnParams);
  if (__classPrivateFieldGet(this, _WebAppMainButton_isDebug, "f")) {
    __classPrivateFieldGet(this, _WebAppMainButton_debugBtn, "f").update(btnParams);
  }
}, _WebAppMainButton_isResettedValue = function _WebAppMainButton_isResettedValue2(value) {
  return value === false || value === null;
}, _WebAppMainButton_setText = function _WebAppMainButton_setText2(value) {
  if (typeof value === "undefined") {
    return this;
  }
  const text = value.trim();
  if (!text.length) {
    throw new WebAppMainButtonParamInvalidError(`text is required ${value}`);
  }
  if (text.length > TELEGRAM_MAIN_BUTTON.MAX_TEXT_LENGTH) {
    throw new WebAppMainButtonParamInvalidError(`text is too long ${text}`);
  }
  __classPrivateFieldSet(this, _WebAppMainButton_buttonText, text, "f");
  return this;
}, _WebAppMainButton_setButtonColor = function _WebAppMainButton_setButtonColor2(value) {
  if (typeof value === "undefined") {
    return this;
  }
  if (__classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_isResettedValue).call(this, value)) {
    __classPrivateFieldSet(this, _WebAppMainButton_buttonColor, false, "f");
    return this;
  }
  const color = parseColorToHex(value);
  if (!color) {
    throw new WebAppMainButtonParamInvalidError(`color format is invalid ${value}`);
  }
  __classPrivateFieldSet(this, _WebAppMainButton_buttonColor, color, "f");
  return this;
}, _WebAppMainButton_setTextColor = function _WebAppMainButton_setTextColor2(value) {
  if (typeof value === "undefined") {
    return this;
  }
  if (__classPrivateFieldGet(this, _WebAppMainButton_instances, "m", _WebAppMainButton_isResettedValue).call(this, value)) {
    __classPrivateFieldSet(this, _WebAppMainButton_buttonTextColor, false, "f");
    return this;
  }
  const textColor = parseColorToHex(value);
  if (!textColor) {
    throw new WebAppMainButtonParamInvalidError(`text color format is invalid ${value}`);
  }
  __classPrivateFieldSet(this, _WebAppMainButton_buttonTextColor, textColor, "f");
  return this;
}, _WebAppMainButton_setIsVisible = function _WebAppMainButton_setIsVisible2(visible) {
  if (typeof visible === "undefined") {
    return this;
  }
  if (visible && !this.text.length) {
    throw new WebAppMainButtonParamInvalidError("text is required");
  }
  __classPrivateFieldSet(this, _WebAppMainButton_isVisible, visible, "f");
  return this;
}, _WebAppMainButton_setIsActive = function _WebAppMainButton_setIsActive2(active) {
  if (typeof active === "undefined") {
    return this;
  }
  __classPrivateFieldSet(this, _WebAppMainButton_isActive, active, "f");
  return this;
};

// temp/esm/WebApp/PopupButton/PopupButton.js
var _WebAppPopupButton_instances;
var _WebAppPopupButton_button;
var _WebAppPopupButton_setID;
var _WebAppPopupButton_setType;
var _WebAppPopupButton_setText;
var TELEGRAM_POPUP_BUTTON = {
  TYPES: {
    DEFAULT: "default",
    OK: "ok",
    CLOSE: "close",
    CANCEL: "cancel",
    DESTRUCTIVE: "destructive"
  },
  MAX_ID_LENGTH: 64,
  MAX_TEXT_LENGTH: 64
};
var VALID_BUTTON_TYPES = Object.values(TELEGRAM_POPUP_BUTTON.TYPES);
var TYPES_WITH_REQUIRED_TEXT = [
  TELEGRAM_POPUP_BUTTON.TYPES.DEFAULT,
  TELEGRAM_POPUP_BUTTON.TYPES.DESTRUCTIVE
];
var WebAppPopupButton = class {
  constructor(config) {
    var _a, _b;
    _WebAppPopupButton_instances.add(this);
    _WebAppPopupButton_button.set(this, {});
    const { id, type, text } = config instanceof WebAppPopupButton ? config.data : config;
    __classPrivateFieldGet(_a = __classPrivateFieldGet(_b = __classPrivateFieldGet(this, _WebAppPopupButton_instances, "m", _WebAppPopupButton_setID).call(this, id), _WebAppPopupButton_instances, "m", _WebAppPopupButton_setType).call(_b, type), _WebAppPopupButton_instances, "m", _WebAppPopupButton_setText).call(_a, text);
  }
  get data() {
    return __classPrivateFieldGet(this, _WebAppPopupButton_button, "f");
  }
};
_WebAppPopupButton_button = /* @__PURE__ */ new WeakMap(), _WebAppPopupButton_instances = /* @__PURE__ */ new WeakSet(), _WebAppPopupButton_setID = function _WebAppPopupButton_setID2(id) {
  const stringifiedID = (id ?? "").toString();
  if (stringifiedID.length > TELEGRAM_POPUP_BUTTON.MAX_ID_LENGTH) {
    throw new WebAppPopupParamInvalidError(`button id is too long ${id}`);
  }
  __classPrivateFieldGet(this, _WebAppPopupButton_button, "f").id = stringifiedID;
  return this;
}, _WebAppPopupButton_setType = function _WebAppPopupButton_setType2(type) {
  const isValidType = VALID_BUTTON_TYPES.includes(type);
  if (!isValidType) {
    throw new WebAppPopupParamInvalidError(`button type is invalid ${type}`);
  }
  __classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type = type;
  return this;
}, _WebAppPopupButton_setText = function _WebAppPopupButton_setText2(text) {
  if (!__classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type) {
    throw new WebAppPopupParamInvalidError("You should set type for `WebAppPopupButton` before setting the text");
  }
  const isTextRequired = TYPES_WITH_REQUIRED_TEXT.includes(__classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type);
  if (!isTextRequired) {
    return;
  }
  const normalizedText = (text ?? "").toString().trim();
  if (!normalizedText) {
    throw new WebAppPopupParamInvalidError(`button text is required for type ${__classPrivateFieldGet(this, _WebAppPopupButton_button, "f").type} ${text}`);
  }
  if (normalizedText.length > TELEGRAM_POPUP_BUTTON.MAX_TEXT_LENGTH) {
    throw new WebAppPopupParamInvalidError(`button text is too long ${normalizedText}`);
  }
  __classPrivateFieldGet(this, _WebAppPopupButton_button, "f").text = normalizedText;
};

// temp/esm/WebApp/Popup/Popup.js
var _Popup_instances;
var _Popup_isOpened;
var _Popup_data;
var _Popup_setCallback;
var _Popup_setTitle;
var _Popup_setMessage;
var _Popup_setButtons;
var TELEGRAM_POPUP = {
  MAX_TITLE_LENGTH: 64,
  MAX_MESSAGE_LENGTH: 256,
  MIN_BUTTONS: 1,
  MAX_BUTTONS: 3
};
var createInitialState = () => ({ params: {}, callback: null });
var Popup = class {
  constructor() {
    _Popup_instances.add(this);
    _Popup_isOpened.set(this, false);
    _Popup_data.set(this, createInitialState());
  }
  open({ params: { title, message, buttons }, callback }) {
    var _a, _b, _c;
    if (__classPrivateFieldGet(this, _Popup_isOpened, "f")) {
      return;
    }
    __classPrivateFieldGet(_a = __classPrivateFieldGet(_b = __classPrivateFieldGet(_c = __classPrivateFieldGet(this, _Popup_instances, "m", _Popup_setTitle).call(this, title), _Popup_instances, "m", _Popup_setMessage).call(_c, message), _Popup_instances, "m", _Popup_setButtons).call(_b, buttons), _Popup_instances, "m", _Popup_setCallback).call(_a, callback);
    __classPrivateFieldSet(this, _Popup_isOpened, true, "f");
  }
  close() {
    __classPrivateFieldSet(this, _Popup_isOpened, false, "f");
    __classPrivateFieldSet(this, _Popup_data, createInitialState(), "f");
  }
  get isOpened() {
    return __classPrivateFieldGet(this, _Popup_isOpened, "f");
  }
  get params() {
    const hasData = Object.keys(__classPrivateFieldGet(this, _Popup_data, "f").params).length > 0;
    return hasData ? __classPrivateFieldGet(this, _Popup_data, "f").params : null;
  }
  get callback() {
    return __classPrivateFieldGet(this, _Popup_data, "f").callback;
  }
};
_Popup_isOpened = /* @__PURE__ */ new WeakMap(), _Popup_data = /* @__PURE__ */ new WeakMap(), _Popup_instances = /* @__PURE__ */ new WeakSet(), _Popup_setCallback = function _Popup_setCallback2(callback) {
  if (callback) {
    __classPrivateFieldGet(this, _Popup_data, "f").callback = callback;
  }
  return this;
}, _Popup_setTitle = function _Popup_setTitle2(title) {
  if (!title) {
    return this;
  }
  const trimmedTitle = title.trim();
  if (!trimmedTitle.length) {
    return this;
  }
  if (title.length > TELEGRAM_POPUP.MAX_TITLE_LENGTH) {
    throw new WebAppPopupParamInvalidError(`title is too long ${title}`);
  }
  __classPrivateFieldGet(this, _Popup_data, "f").params.title = trimmedTitle;
  return this;
}, _Popup_setMessage = function _Popup_setMessage2(message) {
  const trimmedMessage = (message ?? "").trim();
  if (!trimmedMessage) {
    throw new WebAppPopupParamInvalidError(`message is required ${message}`);
  }
  if (trimmedMessage.length > TELEGRAM_POPUP.MAX_MESSAGE_LENGTH) {
    console.error("[Telegram.WebApp] Popup message is too long", trimmedMessage);
    throw new WebAppPopupParamInvalidError(`message is too long ${trimmedMessage}`);
  }
  __classPrivateFieldGet(this, _Popup_data, "f").params.message = trimmedMessage;
  return this;
}, _Popup_setButtons = function _Popup_setButtons2(buttons) {
  if (!buttons) {
    const buttons2 = [
      new WebAppPopupButton({ type: TELEGRAM_POPUP_BUTTON.TYPES.CLOSE, id: generateId(5) }).data
    ];
    __classPrivateFieldGet(this, _Popup_data, "f").params.buttons = buttons2;
    return this;
  }
  if (!Array.isArray(buttons)) {
    throw new WebAppPopupParamInvalidError(`buttons should be an array ${buttons}`);
  }
  if (buttons.length < TELEGRAM_POPUP.MIN_BUTTONS) {
    throw new WebAppPopupParamInvalidError(`should have at least ${TELEGRAM_POPUP.MIN_BUTTONS} button`);
  }
  if (buttons.length > TELEGRAM_POPUP.MAX_BUTTONS) {
    throw new WebAppPopupParamInvalidError(`should not have more than ${TELEGRAM_POPUP.MAX_BUTTONS} buttons`);
  }
  const popupButtons = buttons.map((button) => new WebAppPopupButton(button).data);
  __classPrivateFieldGet(this, _Popup_data, "f").params.buttons = popupButtons;
  return this;
};

// temp/esm/WebApp/QrPopup.js
var _QrPopup_isOpened;
var _QrPopup_data;
var INITIAL_DATA = { params: {}, callback: null };
var TELEGRAM_SCAN_QR_POPUP = { MAX_TEXT_LENGTH: 64 };
var QrPopup = class {
  constructor() {
    _QrPopup_isOpened.set(this, false);
    _QrPopup_data.set(this, INITIAL_DATA);
  }
  open({ params: { text }, callback }) {
    if (__classPrivateFieldGet(this, _QrPopup_isOpened, "f")) {
      throw new WebAppScanQrPopupOpenedError();
    }
    const trimmedText = (text ?? "").trim();
    if (trimmedText.length > TELEGRAM_SCAN_QR_POPUP.MAX_TEXT_LENGTH) {
      throw new WebAppScanQrPopupParamInvalidError(`text is too long ${text}`);
    }
    if (trimmedText) {
      __classPrivateFieldGet(this, _QrPopup_data, "f").params.text = trimmedText;
    }
    __classPrivateFieldGet(this, _QrPopup_data, "f").callback = callback;
    __classPrivateFieldSet(this, _QrPopup_isOpened, true, "f");
  }
  close() {
    __classPrivateFieldSet(this, _QrPopup_isOpened, false, "f");
    __classPrivateFieldSet(this, _QrPopup_data, INITIAL_DATA, "f");
  }
  get isOpened() {
    return __classPrivateFieldGet(this, _QrPopup_isOpened, "f");
  }
  get params() {
    return __classPrivateFieldGet(this, _QrPopup_data, "f").params;
  }
  get callback() {
    return __classPrivateFieldGet(this, _QrPopup_data, "f").callback ?? null;
  }
};
_QrPopup_isOpened = /* @__PURE__ */ new WeakMap(), _QrPopup_data = /* @__PURE__ */ new WeakMap();

// temp/esm/WebApp/Version.js
var _Version_instances;
var _Version_version;
var _Version_makeVersionRanksArray;
var _Version_convertToNumber;
var _Version_compareVersions;
var VERSION_DIFFERENCE = {
  LESS: -1,
  EQUAL: 0,
  GREATER: 1
};
var Version = class {
  constructor(version) {
    _Version_instances.add(this);
    _Version_version.set(this, void 0);
    __classPrivateFieldSet(this, _Version_version, version, "f");
  }
  get value() {
    return __classPrivateFieldGet(this, _Version_version, "f");
  }
  set(version) {
    __classPrivateFieldSet(this, _Version_version, version, "f");
  }
  isSuitableTo(suitableVersion) {
    return __classPrivateFieldGet(this, _Version_instances, "m", _Version_compareVersions).call(this, __classPrivateFieldGet(this, _Version_version, "f"), suitableVersion) >= VERSION_DIFFERENCE.EQUAL;
  }
};
_Version_version = /* @__PURE__ */ new WeakMap(), _Version_instances = /* @__PURE__ */ new WeakSet(), _Version_makeVersionRanksArray = function _Version_makeVersionRanksArray2(version) {
  return version.replace(/^\s+|\s+$/g, "").split(".");
}, _Version_convertToNumber = function _Version_convertToNumber2(stringifiedNumberOrNullable) {
  if (typeof stringifiedNumberOrNullable === "undefined" || stringifiedNumberOrNullable === null) {
    return 0;
  }
  const parsedInt = parseInt(stringifiedNumberOrNullable);
  if (isNaN(parsedInt)) {
    return 0;
  }
  return parsedInt;
}, _Version_compareVersions = function _Version_compareVersions2(v1 = "", v2 = "") {
  if (typeof v1 !== "string") {
    v1 = "";
  }
  if (typeof v2 !== "string") {
    v2 = "";
  }
  const v1Units = __classPrivateFieldGet(this, _Version_instances, "m", _Version_makeVersionRanksArray).call(this, v1);
  const v2Units = __classPrivateFieldGet(this, _Version_instances, "m", _Version_makeVersionRanksArray).call(this, v2);
  const longestVersionLength = Math.max(v1Units.length, v2Units.length);
  for (let i = 0; i < longestVersionLength; i++) {
    const version1Rank = __classPrivateFieldGet(this, _Version_instances, "m", _Version_convertToNumber).call(this, v1Units[i]);
    const version2Rank = __classPrivateFieldGet(this, _Version_instances, "m", _Version_convertToNumber).call(this, v2Units[i]);
    if (version1Rank === version2Rank) {
      continue;
    }
    if (version1Rank > version2Rank) {
      return VERSION_DIFFERENCE.GREATER;
    }
    return VERSION_DIFFERENCE.LESS;
  }
  return VERSION_DIFFERENCE.EQUAL;
};

// temp/esm/WebApp/Viewport.js
var _Viewport_instances;
var _Viewport_eventEmitter;
var _Viewport_viewportHeight;
var _Viewport_viewportStableHeight;
var _Viewport_isExpanded;
var _Viewport_mainButtonHeight;
var _Viewport_calculateHeight;
var _Viewport_calculateViewportHeight;
var Viewport = class {
  static get EVENTS() {
    return {
      VIEWPORT_CHANGED: "viewport_changed",
      HEIGHT_CALCULATED: "height_calculated"
    };
  }
  constructor({ eventEmitter, mainButtonHeight }) {
    _Viewport_instances.add(this);
    _Viewport_eventEmitter.set(this, void 0);
    _Viewport_viewportHeight.set(this, false);
    _Viewport_viewportStableHeight.set(this, false);
    _Viewport_isExpanded.set(this, true);
    _Viewport_mainButtonHeight.set(this, void 0);
    Object.defineProperty(this, "setHeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (data) => {
        if (typeof data !== "undefined") {
          __classPrivateFieldSet(this, _Viewport_isExpanded, Boolean(data.is_expanded), "f");
          __classPrivateFieldSet(this, _Viewport_viewportHeight, data.height, "f");
          if (data.is_state_stable) {
            __classPrivateFieldSet(this, _Viewport_viewportStableHeight, data.height, "f");
          }
          __classPrivateFieldGet(this, _Viewport_eventEmitter, "f").emit(Viewport.EVENTS.VIEWPORT_CHANGED, Boolean(data.is_state_stable));
        }
        const height = __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportHeight, "f"));
        const stableHeight = __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportStableHeight, "f"));
        __classPrivateFieldGet(this, _Viewport_eventEmitter, "f").emit(Viewport.EVENTS.HEIGHT_CALCULATED, { height, stableHeight });
      }
    });
    __classPrivateFieldSet(this, _Viewport_eventEmitter, eventEmitter, "f");
    __classPrivateFieldSet(this, _Viewport_mainButtonHeight, mainButtonHeight, "f");
  }
  on(event, listener) {
    return __classPrivateFieldGet(this, _Viewport_eventEmitter, "f").subscribe(event, listener);
  }
  get isExpanded() {
    return __classPrivateFieldGet(this, _Viewport_isExpanded, "f");
  }
  get height() {
    return __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateViewportHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportHeight, "f"));
  }
  get stableHeight() {
    return __classPrivateFieldGet(this, _Viewport_instances, "m", _Viewport_calculateViewportHeight).call(this, __classPrivateFieldGet(this, _Viewport_viewportStableHeight, "f"));
  }
};
_Viewport_eventEmitter = /* @__PURE__ */ new WeakMap(), _Viewport_viewportHeight = /* @__PURE__ */ new WeakMap(), _Viewport_viewportStableHeight = /* @__PURE__ */ new WeakMap(), _Viewport_isExpanded = /* @__PURE__ */ new WeakMap(), _Viewport_mainButtonHeight = /* @__PURE__ */ new WeakMap(), _Viewport_instances = /* @__PURE__ */ new WeakSet(), _Viewport_calculateHeight = function _Viewport_calculateHeight2(viewportHeight) {
  if (viewportHeight !== false) {
    return viewportHeight - __classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f") + "px";
  }
  return __classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f") ? `calc(100vh - ${__classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f")}px)` : "100vh";
}, _Viewport_calculateViewportHeight = function _Viewport_calculateViewportHeight2(viewportHeight) {
  const height = viewportHeight === false ? window.innerHeight : viewportHeight;
  return height - __classPrivateFieldGet(this, _Viewport_mainButtonHeight, "f");
};

// temp/esm/WebApp/WebApp.js
var TELEGRAM_WEB_APP = {
  MAX_BYTES_TO_SEND: 4096,
  MAX_INLINE_QUERY_LENGTH: 256,
  CHAT_TYPES: {
    USERS: "users",
    BOTS: "bots",
    GROUPS: "groups",
    CHANNELS: "channels"
  },
  EVENTS: {
    THEME_CHANGED: "themeChanged",
    VIEWPORT_CHANGED: "viewportChanged",
    MAIN_BUTTON_CLICKED: "mainButtonClicked",
    BACK_BUTTON_CLICKED: "backButtonClicked",
    SETTINGS_BUTTON_CLICKED: "settingsButtonClicked",
    INVOICE_CLOSED: "invoiceClosed",
    POPUP_CLOSED: "popupClosed",
    QR_TEXT_RECEIVED: "qrTextReceived",
    CLIPBOARD_TEXT_RECEIVED: "clipboardTextReceived"
  }
};
var VALID_CHAT_TYPES = Object.values(TELEGRAM_WEB_APP.CHAT_TYPES);
var TelegramWebApp = (() => {
  var _instances, _platform, _headerColorKey, _lastWindowHeight, _isClosingConfirmationEnabled, _initData, _version2, _theme, _hapticFeedback, _webView, _bgColor, _viewport, _backButton, _mainButton, _invoices, _popup, _clipboard, _qrPopup, _initMainButton, _initBackButton, _initTheme, _initViewport, _initBgColor, _initHapticFeedback, _linkHandler, _setCssVar, _receiveWebViewEvent, _onWebViewEvent, _offWebViewEvent, _onWindowResize, _onInvoiceClosed, _onThemeChanged, _onViewportChanged, _onSettingsButtonPressed, _onPopupClosed, _onClipboardTextReceived, _onQrTextReceived, _onScanQrPopupClosed, _setClosingConfirmation, _getHeaderColorKey;
  let _classDecorators = [FeatureSupport.inVersion({
    methodsConfig: {
      setHeaderColor: {
        availableInVersion: "6.1",
        decorate: ({ appVersion, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            console.warn(`[Telegram.WebApp] Header color is not supported in version ${appVersion}`);
            return;
          }
          executeOriginalMethod();
        }
      },
      setBackgroundColor: {
        availableInVersion: "6.1",
        decorate: ({ appVersion, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            console.warn(`[Telegram.WebApp] Background color is not supported in version ${appVersion}`);
            return;
          }
          executeOriginalMethod();
        }
      },
      enableClosingConfirmation: {
        availableInVersion: "6.2",
        decorate: ({ appVersion, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            console.warn(`[Telegram.WebApp] Closing confirmation is not supported in version ${appVersion}`);
            return;
          }
          executeOriginalMethod();
        }
      },
      disableClosingConfirmation: {
        availableInVersion: "6.2",
        decorate: ({ appVersion, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            console.warn(`[Telegram.WebApp] Closing confirmation is not supported in version ${appVersion}`);
            return;
          }
          executeOriginalMethod();
        }
      },
      switchInlineQuery: {
        availableInVersion: "6.7",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      openInvoice: {
        availableInVersion: "6.1",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      showPopup: {
        availableInVersion: "6.2",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      showAlert: {
        availableInVersion: "6.2",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      showConfirm: {
        availableInVersion: "6.2",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      showScanQrPopup: {
        availableInVersion: "6.4",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      closeScanQrPopup: {
        availableInVersion: "6.4",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      },
      readTextFromClipboard: {
        availableInVersion: "6.4",
        decorate: ({ appVersion, name, isSupported, executeOriginalMethod }) => {
          if (!isSupported) {
            throw new WebAppMethodUnsupportedError(name, appVersion);
          }
          executeOriginalMethod();
        }
      }
    }
  }), bindMethods];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var TelegramWebApp2 = _classThis = class {
    constructor({ initData, version, webView, bgColor, viewport, theme, backButton, mainButton, invoices, popup, clipboard, qrPopup, hapticFeedback }) {
      _instances.add(this);
      _platform.set(this, "unknown");
      _headerColorKey.set(this, TELEGRAM_THEME.HEADER_COLOR.BG_COLOR);
      _lastWindowHeight.set(this, window.innerHeight);
      _isClosingConfirmationEnabled.set(this, false);
      _initData.set(this, void 0);
      _version2.set(this, void 0);
      _theme.set(this, void 0);
      _hapticFeedback.set(this, void 0);
      _webView.set(this, void 0);
      _bgColor.set(this, void 0);
      _viewport.set(this, void 0);
      _backButton.set(this, void 0);
      _mainButton.set(this, void 0);
      _invoices.set(this, void 0);
      _popup.set(this, void 0);
      _clipboard.set(this, void 0);
      _qrPopup.set(this, void 0);
      _linkHandler.set(this, (e) => {
        if (e.metaKey || e.ctrlKey || !e.target) {
          return;
        }
        const isAnchroEl = (el2) => el2.tagName === "A";
        let el = e.target;
        while (!isAnchroEl(el) && el.parentNode) {
          el = el.parentNode;
        }
        const shouldOpenLink = isAnchroEl(el) && el.target !== "_blank" && isHTTPTypeProtocol(el.protocol) && isTelegramHostname(el.hostname);
        if (shouldOpenLink) {
          e.preventDefault();
          this.openTelegramLink(el.href);
        }
      });
      _onWindowResize.set(this, () => {
        if (__classPrivateFieldGet(this, _lastWindowHeight, "f") !== window.innerHeight) {
          __classPrivateFieldSet(this, _lastWindowHeight, window.innerHeight, "f");
          __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.VIEWPORT_CHANGED, { isStateStable: true });
        }
      });
      _onInvoiceClosed.set(this, (_, { slug, status }) => {
        if (!slug) {
          return;
        }
        if (!__classPrivateFieldGet(this, _invoices, "f").has(slug)) {
          return;
        }
        const { url, callback } = __classPrivateFieldGet(this, _invoices, "f").remove(slug);
        callback?.(status);
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.INVOICE_CLOSED, { url, status });
      });
      _onThemeChanged.set(this, (_, eventData) => {
        if (!eventData.theme_params) {
          return;
        }
        __classPrivateFieldGet(this, _theme, "f").setParams(eventData.theme_params);
        __classPrivateFieldGet(this, _mainButton, "f").setParams({});
        __classPrivateFieldGet(this, _bgColor, "f").update();
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.THEME_CHANGED);
      });
      _onViewportChanged.set(this, (_, eventData) => {
        if (!eventData.height) {
          return;
        }
        window.removeEventListener("resize", __classPrivateFieldGet(this, _onWindowResize, "f"));
        __classPrivateFieldGet(this, _viewport, "f").setHeight(eventData);
      });
      _onSettingsButtonPressed.set(this, () => {
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.SETTINGS_BUTTON_CLICKED);
      });
      _onPopupClosed.set(this, (_, eventData) => {
        if (!__classPrivateFieldGet(this, _popup, "f").isOpened) {
          return;
        }
        const callback = __classPrivateFieldGet(this, _popup, "f").callback;
        __classPrivateFieldGet(this, _popup, "f").close();
        const buttonID = eventData.button_id ?? null;
        if (buttonID) {
          callback?.(buttonID);
        }
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.POPUP_CLOSED, { button_id: buttonID });
      });
      _onClipboardTextReceived.set(this, (_, { req_id: id, data = null }) => {
        if (!id || !__classPrivateFieldGet(this, _clipboard, "f").hasRequest(id)) {
          return;
        }
        const callback = __classPrivateFieldGet(this, _clipboard, "f").getRequest(id);
        __classPrivateFieldGet(this, _clipboard, "f").removeRequest(id);
        callback?.(data);
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.CLIPBOARD_TEXT_RECEIVED, { data });
      });
      _onQrTextReceived.set(this, (_, eventData) => {
        if (!__classPrivateFieldGet(this, _qrPopup, "f").isOpened) {
          return;
        }
        const { callback } = __classPrivateFieldGet(this, _qrPopup, "f");
        const data = eventData.data ?? null;
        if (callback?.(data)) {
          __classPrivateFieldGet(this, _qrPopup, "f").close();
          __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_CLOSE_SCAN_QR_POPUP);
        }
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.QR_TEXT_RECEIVED, { data });
      });
      _onScanQrPopupClosed.set(this, () => __classPrivateFieldGet(this, _qrPopup, "f").close());
      __classPrivateFieldSet(this, _initData, initData, "f");
      __classPrivateFieldSet(this, _version2, version, "f");
      __classPrivateFieldSet(this, _webView, webView, "f");
      __classPrivateFieldSet(this, _bgColor, bgColor, "f");
      __classPrivateFieldGet(this, _instances, "m", _initBgColor).call(this);
      __classPrivateFieldSet(this, _viewport, viewport, "f");
      __classPrivateFieldGet(this, _instances, "m", _initViewport).call(this);
      __classPrivateFieldSet(this, _hapticFeedback, hapticFeedback, "f");
      __classPrivateFieldGet(this, _instances, "m", _initHapticFeedback).call(this);
      __classPrivateFieldSet(this, _backButton, backButton, "f");
      __classPrivateFieldGet(this, _instances, "m", _initBackButton).call(this);
      __classPrivateFieldSet(this, _mainButton, mainButton, "f");
      __classPrivateFieldGet(this, _instances, "m", _initMainButton).call(this);
      const { initParams } = __classPrivateFieldGet(this, _webView, "f");
      __classPrivateFieldSet(this, _theme, theme, "f");
      __classPrivateFieldGet(this, _instances, "m", _initTheme).call(this, initParams.tgWebAppThemeParams);
      __classPrivateFieldSet(this, _popup, popup, "f");
      if (initParams.tgWebAppVersion) {
        __classPrivateFieldGet(this, _version2, "f").set(initParams.tgWebAppVersion);
      }
      if (initParams.tgWebAppPlatform) {
        __classPrivateFieldSet(this, _platform, initParams.tgWebAppPlatform, "f");
      }
      __classPrivateFieldSet(this, _invoices, invoices, "f");
      __classPrivateFieldSet(this, _clipboard, clipboard, "f");
      __classPrivateFieldSet(this, _qrPopup, qrPopup, "f");
      __classPrivateFieldGet(this, _bgColor, "f").update();
      __classPrivateFieldGet(this, _viewport, "f").setHeight();
      window.addEventListener("resize", __classPrivateFieldGet(this, _onWindowResize, "f"));
      if (__classPrivateFieldGet(this, _webView, "f").isIframe) {
        document.addEventListener("click", __classPrivateFieldGet(this, _linkHandler, "f"));
      }
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.THEME_CHANGED, __classPrivateFieldGet(this, _onThemeChanged, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.VIEWPORT_CHANGED, __classPrivateFieldGet(this, _onViewportChanged, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.INVOICE_CLOSED, __classPrivateFieldGet(this, _onInvoiceClosed, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.SETTINGS_BUTTON_PRESSED, __classPrivateFieldGet(this, _onSettingsButtonPressed, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.POPUP_CLOSED, __classPrivateFieldGet(this, _onPopupClosed, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.QR_TEXT_RECEIVED, __classPrivateFieldGet(this, _onQrTextReceived, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.SCAN_QR_POPUP_CLOSED, __classPrivateFieldGet(this, _onScanQrPopupClosed, "f"));
      __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.CLIPBOARD_TEXT_RECEIVED, __classPrivateFieldGet(this, _onClipboardTextReceived, "f"));
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_REQUEST_THEME);
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_REQUEST_VIEWPORT);
    }
    get initData() {
      return __classPrivateFieldGet(this, _initData, "f").rawData;
    }
    get initDataUnsafe() {
      return __classPrivateFieldGet(this, _initData, "f").unsafeData;
    }
    get themeParams() {
      return __classPrivateFieldGet(this, _theme, "f").params;
    }
    get colorScheme() {
      return __classPrivateFieldGet(this, _theme, "f").colorScheme;
    }
    get version() {
      return __classPrivateFieldGet(this, _version2, "f").value;
    }
    get platform() {
      return __classPrivateFieldGet(this, _platform, "f");
    }
    set headerColor(value) {
      this.setHeaderColor(value);
    }
    get headerColor() {
      return __classPrivateFieldGet(this, _theme, "f").getParam(__classPrivateFieldGet(this, _headerColorKey, "f")) ?? "";
    }
    set backgroundColor(color) {
      __classPrivateFieldGet(this, _bgColor, "f").set(color);
    }
    get backgroundColor() {
      return __classPrivateFieldGet(this, _bgColor, "f").get() ?? "";
    }
    get HapticFeedback() {
      return __classPrivateFieldGet(this, _hapticFeedback, "f");
    }
    get BackButton() {
      return __classPrivateFieldGet(this, _backButton, "f");
    }
    get MainButton() {
      return __classPrivateFieldGet(this, _mainButton, "f");
    }
    get viewportHeight() {
      return __classPrivateFieldGet(this, _viewport, "f").height;
    }
    get viewportStableHeight() {
      return __classPrivateFieldGet(this, _viewport, "f").stableHeight;
    }
    get isExpanded() {
      return __classPrivateFieldGet(this, _viewport, "f").isExpanded;
    }
    // FIXME: add `FeatureSupport`
    set isClosingConfirmationEnabled(isEnabled) {
      __classPrivateFieldGet(this, _instances, "m", _setClosingConfirmation).call(this, isEnabled);
    }
    get isClosingConfirmationEnabled() {
      return __classPrivateFieldGet(this, _isClosingConfirmationEnabled, "f");
    }
    setHeaderColor(colorKeyOrColor) {
      const colorKey = __classPrivateFieldGet(this, _instances, "m", _getHeaderColorKey).call(this, colorKeyOrColor);
      if (colorKey !== TELEGRAM_THEME.HEADER_COLOR.BG_COLOR && colorKey !== TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
        throw new WebAppHeaderColorKeyInvalidError(colorKeyOrColor);
      }
      __classPrivateFieldSet(this, _headerColorKey, colorKey, "f");
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SET_HEADER_COLOR, void 0, {
        color_key: colorKey
      });
    }
    setBackgroundColor(color) {
      this.backgroundColor = color;
    }
    sendData(data) {
      if (!data || !data.length) {
        throw new WebAppDataInvalidError(`is required ${data}`);
      }
      if (byteLength(data) > TELEGRAM_WEB_APP.MAX_BYTES_TO_SEND) {
        throw new WebAppDataInvalidError(`is too long ${data}`);
      }
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_DATA_SEND, void 0, { data });
    }
    isVersionAtLeast(version) {
      return __classPrivateFieldGet(this, _version2, "f").isSuitableTo(version);
    }
    openLink(url, options) {
      const { protocol } = new URL(url);
      if (!isHTTPTypeProtocol(protocol)) {
        throw new WebAppTelegramUrlInvalidError(`protocol is not supported ${url}`);
      }
      if (!__classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.1")) {
        window.open(url, "_blank");
        return;
      }
      const linkOptions = options ?? { try_instant_view: false };
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_LINK, void 0, {
        url,
        try_instant_view: __classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.4") && linkOptions.try_instant_view
      });
    }
    openInvoice(url, callback) {
      const slug = __classPrivateFieldGet(this, _invoices, "f").create(url);
      __classPrivateFieldGet(this, _invoices, "f").save(slug, { url, callback });
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_INVOICE, void 0, {
        slug
      });
    }
    openTelegramLink(url) {
      if (!__classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.1")) {
        return;
      }
      const { protocol, hostname, pathname, search } = new URL(url);
      if (!isHTTPTypeProtocol(protocol)) {
        throw new WebAppTelegramUrlInvalidError(`protocol is not supported ${url}`);
      }
      if (!isTelegramHostname(hostname)) {
        throw new WebAppTelegramUrlInvalidError(`host is not supported ${url}`);
      }
      const fullPath = pathname + search;
      if (__classPrivateFieldGet(this, _webView, "f").isIframe) {
        __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_TG_LINK, void 0, {
          path_full: fullPath
        });
        return;
      }
      location.href = "https://t.me" + fullPath;
    }
    readTextFromClipboard(callback) {
      const id = generateId(16);
      __classPrivateFieldGet(this, _clipboard, "f").setRequest(id, callback);
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_READ_TEXT_FROM_CLIPBOARD, void 0, {
        req_id: id
      });
    }
    enableClosingConfirmation() {
      __classPrivateFieldSet(this, _isClosingConfirmationEnabled, true, "f");
    }
    disableClosingConfirmation() {
      __classPrivateFieldSet(this, _isClosingConfirmationEnabled, false, "f");
    }
    showPopup(params, callback) {
      if (__classPrivateFieldGet(this, _popup, "f").isOpened) {
        throw new WebAppPopupOpenedError();
      }
      if (typeof params !== "object" && params === null) {
        throw new WebAppPopupParamInvalidError(`params must be an object ${params}`);
      }
      __classPrivateFieldGet(this, _popup, "f").open({ params, callback });
      const data = __classPrivateFieldGet(this, _popup, "f").params ?? {};
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_POPUP, void 0, data);
    }
    showAlert(message, callback) {
      const callbackWithoutID = () => callback?.();
      this.showPopup({ message }, callbackWithoutID);
    }
    showConfirm(message, callback) {
      const OK_BTN_ID = "ok";
      const popupCallback = (pressedBtnID) => callback?.(pressedBtnID === OK_BTN_ID);
      this.showPopup({
        message,
        buttons: [
          new WebAppPopupButton({ type: TELEGRAM_POPUP_BUTTON.TYPES.OK, id: OK_BTN_ID }).data,
          new WebAppPopupButton({ type: TELEGRAM_POPUP_BUTTON.TYPES.CANCEL, id: "" }).data
        ]
      }, popupCallback);
    }
    switchInlineQuery(query, chatTypesToChoose) {
      if (!__classPrivateFieldGet(this, _webView, "f").initParams.tgWebAppBotInline) {
        throw new WebAppInlineModeDisabledError();
      }
      const queryToSend = (query || "").trim();
      if (queryToSend.length > TELEGRAM_WEB_APP.MAX_INLINE_QUERY_LENGTH) {
        throw new WebAppInlineQueryInvalidError(`is too long ${query}`);
      }
      const chatTypes = chatTypesToChoose ? chatTypesToChoose : [];
      if (!Array.isArray(chatTypesToChoose)) {
        throw new WebAppInlineChooseChatTypeInvalidError(`types should be an array ${chatTypesToChoose}`);
      }
      const chats = [...new Set(chatTypes)];
      chats.forEach((chat) => {
        if (!VALID_CHAT_TYPES.includes(chat)) {
          throw new WebAppInlineChooseChatTypeInvalidError(`type is invalid ${chat}`);
        }
      });
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SWITCH_INLINE_QUERY, void 0, {
        query: queryToSend,
        chat_types: chats
      });
    }
    showScanQrPopup(params, callback) {
      __classPrivateFieldGet(this, _qrPopup, "f").open({ params, callback });
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_OPEN_SCAN_QR_POPUP, void 0, __classPrivateFieldGet(this, _qrPopup, "f").params);
    }
    closeScanQrPopup() {
      __classPrivateFieldGet(this, _qrPopup, "f").close();
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_CLOSE_SCAN_QR_POPUP);
    }
    onEvent(eventType, callback) {
      __classPrivateFieldGet(this, _instances, "m", _onWebViewEvent).call(this, eventType, callback);
    }
    offEvent(eventType, callback) {
      __classPrivateFieldGet(this, _instances, "m", _offWebViewEvent).call(this, eventType, callback);
    }
    ready() {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_READY);
    }
    expand() {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_EXPAND);
    }
    close() {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_CLOSE);
    }
  };
  _platform = /* @__PURE__ */ new WeakMap();
  _headerColorKey = /* @__PURE__ */ new WeakMap();
  _lastWindowHeight = /* @__PURE__ */ new WeakMap();
  _isClosingConfirmationEnabled = /* @__PURE__ */ new WeakMap();
  _initData = /* @__PURE__ */ new WeakMap();
  _version2 = /* @__PURE__ */ new WeakMap();
  _theme = /* @__PURE__ */ new WeakMap();
  _hapticFeedback = /* @__PURE__ */ new WeakMap();
  _webView = /* @__PURE__ */ new WeakMap();
  _bgColor = /* @__PURE__ */ new WeakMap();
  _viewport = /* @__PURE__ */ new WeakMap();
  _backButton = /* @__PURE__ */ new WeakMap();
  _mainButton = /* @__PURE__ */ new WeakMap();
  _invoices = /* @__PURE__ */ new WeakMap();
  _popup = /* @__PURE__ */ new WeakMap();
  _clipboard = /* @__PURE__ */ new WeakMap();
  _qrPopup = /* @__PURE__ */ new WeakMap();
  _linkHandler = /* @__PURE__ */ new WeakMap();
  _onWindowResize = /* @__PURE__ */ new WeakMap();
  _onInvoiceClosed = /* @__PURE__ */ new WeakMap();
  _onThemeChanged = /* @__PURE__ */ new WeakMap();
  _onViewportChanged = /* @__PURE__ */ new WeakMap();
  _onSettingsButtonPressed = /* @__PURE__ */ new WeakMap();
  _onPopupClosed = /* @__PURE__ */ new WeakMap();
  _onClipboardTextReceived = /* @__PURE__ */ new WeakMap();
  _onQrTextReceived = /* @__PURE__ */ new WeakMap();
  _onScanQrPopupClosed = /* @__PURE__ */ new WeakMap();
  _instances = /* @__PURE__ */ new WeakSet();
  _initMainButton = function _initMainButton2() {
    const onMainButtonClick = (isActive) => {
      if (isActive) {
        __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.MAIN_BUTTON_CLICKED);
      }
    };
    __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.MAIN_BUTTON_PRESSED, () => {
      onMainButtonClick(__classPrivateFieldGet(this, _mainButton, "f").isActive);
    });
    __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.DEBUG_BUTTON_CLICKED, onMainButtonClick);
    __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.DEBUG_BUTTON_UPDATED, __classPrivateFieldGet(this, _viewport, "f").setHeight);
    __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.UPDATED, (params) => {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SETUP_MAIN_BUTTON, void 0, params);
    });
    __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.CLICKED, (callback) => {
      __classPrivateFieldGet(this, _instances, "m", _onWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.MAIN_BUTTON_CLICKED, callback);
    });
    __classPrivateFieldGet(this, _mainButton, "f").on(WebAppMainButton.EVENTS.OFF_CLICKED, (callback) => {
      __classPrivateFieldGet(this, _instances, "m", _offWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.MAIN_BUTTON_CLICKED, callback);
    });
  };
  _initBackButton = function _initBackButton2() {
    __classPrivateFieldGet(this, _webView, "f").onEvent(TELEGRAM_WEB_VIEW.EVENTS.RECEIVE.BACK_BUTTON_PRESSED, () => {
      __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.BACK_BUTTON_CLICKED);
    });
    __classPrivateFieldGet(this, _backButton, "f")[BACK_BUTTON_ON_EVENT_KEY](BACK_BUTTON_EVENTS.UPDATED, (params) => {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SETUP_BACK_BUTTON, void 0, params);
    });
    __classPrivateFieldGet(this, _backButton, "f")[BACK_BUTTON_ON_EVENT_KEY](BACK_BUTTON_EVENTS.CLICKED, (callback) => {
      __classPrivateFieldGet(this, _instances, "m", _onWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.BACK_BUTTON_CLICKED, callback);
    });
    __classPrivateFieldGet(this, _backButton, "f")[BACK_BUTTON_ON_EVENT_KEY](BACK_BUTTON_EVENTS.OFF_CLICKED, (callback) => {
      __classPrivateFieldGet(this, _instances, "m", _offWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.BACK_BUTTON_CLICKED, callback);
    });
  };
  _initTheme = function _initTheme2(rawTheme) {
    __classPrivateFieldGet(this, _theme, "f").on(Theme.EVENTS.COLOR_SCHEME_CHANGED, (colorScheme) => __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, "color-scheme", colorScheme));
    __classPrivateFieldGet(this, _theme, "f").on(Theme.EVENTS.THEME_PARAMS_CHANGED, (themeParams2) => SessionStorage.set("themeParams", themeParams2));
    __classPrivateFieldGet(this, _theme, "f").on(Theme.EVENTS.THEME_PARAM_SET, (param, value) => {
      const cssVar = "theme-" + param.split("_").join("-");
      __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, cssVar, value);
    });
    if (rawTheme) {
      try {
        const parsedThemeParams = JSON.parse(rawTheme);
        if (parsedThemeParams) {
          __classPrivateFieldGet(this, _theme, "f").setParams(parsedThemeParams);
        }
      } catch {
      }
    }
    const themeParams = SessionStorage.get("themeParams");
    if (themeParams) {
      __classPrivateFieldGet(this, _theme, "f").setParams(themeParams);
    }
  };
  _initViewport = function _initViewport2() {
    __classPrivateFieldGet(this, _viewport, "f").on(Viewport.EVENTS.VIEWPORT_CHANGED, (isStateStable) => {
      __classPrivateFieldGet(this, _instances, "m", _receiveWebViewEvent).call(this, TELEGRAM_WEB_APP.EVENTS.VIEWPORT_CHANGED, { isStateStable });
    });
    __classPrivateFieldGet(this, _viewport, "f").on(Viewport.EVENTS.HEIGHT_CALCULATED, ({ height, stableHeight }) => {
      __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, "viewport-height", height);
      __classPrivateFieldGet(this, _instances, "m", _setCssVar).call(this, "viewport-stable-height", stableHeight);
    });
  };
  _initBgColor = function _initBgColor2() {
    __classPrivateFieldGet(this, _bgColor, "f").on(BackgroundColor.EVENTS.UPDATED, (maybeColor) => {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SET_BACKGROUND_COLOR, void 0, {
        color: maybeColor ?? ""
      });
    });
  };
  _initHapticFeedback = function _initHapticFeedback2() {
    __classPrivateFieldGet(this, _hapticFeedback, "f")[WebAppHapticFeedback.PRIVATE_KEYS.ON_EVENT](WebAppHapticFeedback.EVENTS.FEEDBACK_TRIGGERED, (feedback) => {
      __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_TRIGGER_HAPTIC_FEEDBACK, void 0, feedback);
    });
  };
  _setCssVar = function _setCssVar2(name, value) {
    const root = document.documentElement;
    root?.style?.setProperty("--tg-" + name, value);
  };
  _receiveWebViewEvent = function _receiveWebViewEvent2(eventType, params) {
    const callbackArgs = params ? [params] : [];
    __classPrivateFieldGet(this, _webView, "f").callEventCallbacks("webview:" + eventType, (callback) => {
      callback.apply(this, callbackArgs);
    });
  };
  _onWebViewEvent = function _onWebViewEvent2(eventType, callback) {
    __classPrivateFieldGet(this, _webView, "f").onEvent("webview:" + eventType, callback);
  };
  _offWebViewEvent = function _offWebViewEvent2(eventType, callback) {
    __classPrivateFieldGet(this, _webView, "f").offEvent("webview:" + eventType, callback);
  };
  _setClosingConfirmation = function _setClosingConfirmation2(isEnabled) {
    if (!__classPrivateFieldGet(this, _version2, "f").isSuitableTo("6.2")) {
      console.warn("[Telegram.WebApp] Closing confirmation is not supported in version " + __classPrivateFieldGet(this, _version2, "f").value);
      return;
    }
    __classPrivateFieldSet(this, _isClosingConfirmationEnabled, Boolean(isEnabled), "f");
    __classPrivateFieldGet(this, _webView, "f").postEvent(TELEGRAM_WEB_VIEW.EVENTS.SEND.WEB_APP_SETUP_CLOSING_BEHAVIOR, void 0, {
      need_confirmation: __classPrivateFieldGet(this, _isClosingConfirmationEnabled, "f")
    });
  };
  _getHeaderColorKey = function _getHeaderColorKey2(colorKeyOrColor) {
    if (colorKeyOrColor === TELEGRAM_THEME.HEADER_COLOR.BG_COLOR || colorKeyOrColor === TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR) {
      return colorKeyOrColor;
    }
    const parsedColor = parseColorToHex(colorKeyOrColor);
    const themeParams = __classPrivateFieldGet(this, _theme, "f").params;
    if (themeParams.bg_color && themeParams.bg_color === parsedColor) {
      return TELEGRAM_THEME.HEADER_COLOR.BG_COLOR;
    }
    if (themeParams.secondary_bg_color && themeParams.secondary_bg_color === parsedColor) {
      return TELEGRAM_THEME.HEADER_COLOR.SECONDARY_BG_COLOR;
    }
    return false;
  };
  __setFunctionName(_classThis, "TelegramWebApp");
  (() => {
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name }, null, _classExtraInitializers);
    TelegramWebApp2 = _classThis = _classDescriptor.value;
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return TelegramWebApp2 = _classThis;
})();

// temp/esm/Telegram/Telegram.js
var _TelegramWebAppContainer_webApp;
var _TelegramWebAppContainer_webView;
var DEFAULT_VERSION = "6.0";
var TelegramWebAppContainer = class {
  constructor({ exposeInMainWorld = false } = {}) {
    _TelegramWebAppContainer_webApp.set(this, void 0);
    _TelegramWebAppContainer_webView.set(this, void 0);
    if (typeof window === "undefined") {
      throw new Error("Telegram web app can only be launched in browser");
    }
    const initParams = getWebViewInitParams(location.hash);
    let isDebug = false;
    try {
      isDebug = Boolean(JSON.parse(initParams.tgWebAppDebug));
    } catch {
    }
    const eventEmitter = new EventBus();
    const webView = new TelegramWebView(initParams);
    const version = new Version(initParams.tgWebAppVersion ?? DEFAULT_VERSION);
    FeatureSupport.version = version;
    const initData = new InitData(initParams.tgWebAppData);
    const viewport = new Viewport({ eventEmitter, mainButtonHeight: 0 });
    const theme = new Theme(eventEmitter);
    const bgColor = new BackgroundColor({ eventEmitter, themeParams: () => theme.params });
    const backButton = new WebAppBackButton({ eventEmitter });
    const clipboard = new WebAppClipboard();
    const hapticFeedback = new WebAppHapticFeedback(eventEmitter);
    const invoices = new Invoices();
    const mainButton = new WebAppMainButton({ eventEmitter, theme, isDebug });
    const popup = new Popup();
    const qrPopup = new QrPopup();
    const webApp = new TelegramWebApp({
      backButton,
      bgColor,
      clipboard,
      hapticFeedback,
      initData,
      invoices,
      mainButton,
      popup,
      qrPopup,
      theme,
      version,
      viewport,
      webView
    });
    if (exposeInMainWorld) {
      window.Telegram = {
        WebView: webView,
        WebApp: webApp,
        Utils: {
          urlSafeDecode,
          urlParseQueryString,
          urlParseHashParams,
          urlAppendHashParams,
          sessionStorageSet: SessionStorage.set,
          sessionStorageGet: SessionStorage.get
        },
        // For Windows Phone app
        TelegramGameProxy_receiveEvent: webView.receiveEvent,
        // App backward compatibility
        TelegramGameProxy: {
          receiveEvent: webView.receiveEvent
        }
      };
    }
    __classPrivateFieldSet(this, _TelegramWebAppContainer_webApp, webApp, "f");
    __classPrivateFieldSet(this, _TelegramWebAppContainer_webView, webView, "f");
  }
  get WebApp() {
    return __classPrivateFieldGet(this, _TelegramWebAppContainer_webApp, "f");
  }
  get WebView() {
    return __classPrivateFieldGet(this, _TelegramWebAppContainer_webView, "f");
  }
};
_TelegramWebAppContainer_webApp = /* @__PURE__ */ new WeakMap(), _TelegramWebAppContainer_webView = /* @__PURE__ */ new WeakMap();
export {
  TELEGRAM_HAPTIC_FEEDBACK,
  TELEGRAM_MAIN_BUTTON,
  TELEGRAM_POPUP,
  TELEGRAM_POPUP_BUTTON,
  TELEGRAM_SCAN_QR_POPUP,
  TELEGRAM_THEME,
  TELEGRAM_WEB_APP,
  TELEGRAM_WEB_VIEW,
  TelegramWebAppContainer
};
